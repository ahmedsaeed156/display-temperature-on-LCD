
receive_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002fcc  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800074  00800074  00003074  2**0
                  ALLOC
  3 .stab         000022c8  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f13  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000624f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000638f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000064ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009033  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a99b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_13>
      38:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__vector_14>
      3c:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <main>
      8a:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_cfg.h"
#include "DIO_priv.h"


void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8e ef       	ldi	r24, 0xFE	; 254
     b6c:	80 83       	st	Z, r24

}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy,uint8 u8PinValueCpy)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2b 97       	sbiw	r28, 0x0b	; 11
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	
	tenuErrorStatus enuReturnStateLoc = EOK ;
     b8c:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	d8 f5       	brcc	.+118    	; 0xc0a <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <DIO_enuWritePin+0x3e>
     ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ba8:	3b 85       	ldd	r19, Y+11	; 0x0b
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	31 05       	cpc	r19, r1
     bae:	b1 f0       	breq	.+44     	; 0xbdc <DIO_enuWritePin+0x68>
     bb0:	29 c0       	rjmp	.+82     	; 0xc04 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
     bb2:	ab e3       	ldi	r26, 0x3B	; 59
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_enuWritePin+0x5c>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_enuWritePin+0x58>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	f4 c0       	rjmp	.+488    	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
     bdc:	ab e3       	ldi	r26, 0x3B	; 59
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e3       	ldi	r30, 0x3B	; 59
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_enuWritePin+0x86>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_enuWritePin+0x82>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	e0 c0       	rjmp	.+448    	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	dd c0       	rjmp	.+442    	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 30       	cpi	r24, 0x08	; 8
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <DIO_enuWritePin+0x9e>
     c10:	45 c0       	rjmp	.+138    	; 0xc9c <DIO_enuWritePin+0x128>
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	80 31       	cpi	r24, 0x10	; 16
     c16:	08 f0       	brcs	.+2      	; 0xc1a <DIO_enuWritePin+0xa6>
     c18:	41 c0       	rjmp	.+130    	; 0xc9c <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	39 87       	std	Y+9, r19	; 0x09
     c22:	28 87       	std	Y+8, r18	; 0x08
     c24:	88 85       	ldd	r24, Y+8	; 0x08
     c26:	99 85       	ldd	r25, Y+9	; 0x09
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	31 f0       	breq	.+12     	; 0xc38 <DIO_enuWritePin+0xc4>
     c2c:	28 85       	ldd	r18, Y+8	; 0x08
     c2e:	39 85       	ldd	r19, Y+9	; 0x09
     c30:	21 30       	cpi	r18, 0x01	; 1
     c32:	31 05       	cpc	r19, r1
     c34:	c9 f0       	breq	.+50     	; 0xc68 <DIO_enuWritePin+0xf4>
     c36:	2f c0       	rjmp	.+94     	; 0xc96 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8);
     c38:	a8 e3       	ldi	r26, 0x38	; 56
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e8 e3       	ldi	r30, 0x38	; 56
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	9c 01       	movw	r18, r24
     c4c:	27 70       	andi	r18, 0x07	; 7
     c4e:	30 70       	andi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_enuWritePin+0xe8>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_enuWritePin+0xe4>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	ae c0       	rjmp	.+348    	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
     c68:	a8 e3       	ldi	r26, 0x38	; 56
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e3       	ldi	r30, 0x38	; 56
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	9c 01       	movw	r18, r24
     c7c:	27 70       	andi	r18, 0x07	; 7
     c7e:	30 70       	andi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_enuWritePin+0x118>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_enuWritePin+0x114>
     c90:	84 2b       	or	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	97 c0       	rjmp	.+302    	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	94 c0       	rjmp	.+296    	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	80 31       	cpi	r24, 0x10	; 16
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <DIO_enuWritePin+0x130>
     ca2:	45 c0       	rjmp	.+138    	; 0xd2e <DIO_enuWritePin+0x1ba>
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 31       	cpi	r24, 0x18	; 24
     ca8:	08 f0       	brcs	.+2      	; 0xcac <DIO_enuWritePin+0x138>
     caa:	41 c0       	rjmp	.+130    	; 0xd2e <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	3f 83       	std	Y+7, r19	; 0x07
     cb4:	2e 83       	std	Y+6, r18	; 0x06
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	31 f0       	breq	.+12     	; 0xcca <DIO_enuWritePin+0x156>
     cbe:	2e 81       	ldd	r18, Y+6	; 0x06
     cc0:	3f 81       	ldd	r19, Y+7	; 0x07
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	c9 f0       	breq	.+50     	; 0xcfa <DIO_enuWritePin+0x186>
     cc8:	2f c0       	rjmp	.+94     	; 0xd28 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%8);
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	27 70       	andi	r18, 0x07	; 7
     ce0:	30 70       	andi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_enuWritePin+0x17a>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_enuWritePin+0x176>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	65 c0       	rjmp	.+202    	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%8);
     cfa:	a5 e3       	ldi	r26, 0x35	; 53
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e3       	ldi	r30, 0x35	; 53
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 01       	movw	r18, r24
     d0e:	27 70       	andi	r18, 0x07	; 7
     d10:	30 70       	andi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_enuWritePin+0x1aa>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_enuWritePin+0x1a6>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	4e c0       	rjmp	.+156    	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	4b c0       	rjmp	.+150    	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	88 31       	cpi	r24, 0x18	; 24
     d32:	08 f4       	brcc	.+2      	; 0xd36 <DIO_enuWritePin+0x1c2>
     d34:	45 c0       	rjmp	.+138    	; 0xdc0 <DIO_enuWritePin+0x24c>
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	80 32       	cpi	r24, 0x20	; 32
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <DIO_enuWritePin+0x1ca>
     d3c:	41 c0       	rjmp	.+130    	; 0xdc0 <DIO_enuWritePin+0x24c>
	{
		switch (u8PinValueCpy)
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3d 83       	std	Y+5, r19	; 0x05
     d46:	2c 83       	std	Y+4, r18	; 0x04
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	31 f0       	breq	.+12     	; 0xd5c <DIO_enuWritePin+0x1e8>
     d50:	2c 81       	ldd	r18, Y+4	; 0x04
     d52:	3d 81       	ldd	r19, Y+5	; 0x05
     d54:	21 30       	cpi	r18, 0x01	; 1
     d56:	31 05       	cpc	r19, r1
     d58:	c9 f0       	breq	.+50     	; 0xd8c <DIO_enuWritePin+0x218>
     d5a:	2f c0       	rjmp	.+94     	; 0xdba <DIO_enuWritePin+0x246>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%8);
     d5c:	a2 e3       	ldi	r26, 0x32	; 50
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e2 e3       	ldi	r30, 0x32	; 50
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 01       	movw	r18, r24
     d70:	27 70       	andi	r18, 0x07	; 7
     d72:	30 70       	andi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enuWritePin+0x20c>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enuWritePin+0x208>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	1c c0       	rjmp	.+56     	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%8);
     d8c:	a2 e3       	ldi	r26, 0x32	; 50
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e2 e3       	ldi	r30, 0x32	; 50
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9c 01       	movw	r18, r24
     da0:	27 70       	andi	r18, 0x07	; 7
     da2:	30 70       	andi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_enuWritePin+0x23c>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_enuWritePin+0x238>
     db4:	84 2b       	or	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
	
}     
     dc6:	2b 96       	adiw	r28, 0x0b	; 11
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy ,uint8 * pu8PinValueCpy )
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <DIO_enuReadPin+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <DIO_enuReadPin+0x8>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	8a 83       	std	Y+2, r24	; 0x02
     de6:	7c 83       	std	Y+4, r23	; 0x04
     de8:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
     dea:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	09 f4       	brne	.+2      	; 0xdf6 <DIO_enuReadPin+0x1e>
     df4:	6e c0       	rjmp	.+220    	; 0xed2 <DIO_enuReadPin+0xfa>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	a0 f4       	brcc	.+40     	; 0xe24 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
     dfc:	e9 e3       	ldi	r30, 0x39	; 57
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_enuReadPin+0x3c>
     e10:	55 95       	asr	r21
     e12:	47 95       	ror	r20
     e14:	8a 95       	dec	r24
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_enuReadPin+0x38>
     e18:	ca 01       	movw	r24, r20
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	eb 81       	ldd	r30, Y+3	; 0x03
     e1e:	fc 81       	ldd	r31, Y+4	; 0x04
     e20:	80 83       	st	Z, r24
     e22:	59 c0       	rjmp	.+178    	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 30       	cpi	r24, 0x08	; 8
     e28:	c8 f0       	brcs	.+50     	; 0xe5c <DIO_enuReadPin+0x84>
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	80 31       	cpi	r24, 0x10	; 16
     e2e:	b0 f4       	brcc	.+44     	; 0xe5c <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);		
     e30:	e6 e3       	ldi	r30, 0x36	; 54
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	87 70       	andi	r24, 0x07	; 7
     e42:	90 70       	andi	r25, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_enuReadPin+0x74>
     e48:	55 95       	asr	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_enuReadPin+0x70>
     e50:	ca 01       	movw	r24, r20
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	eb 81       	ldd	r30, Y+3	; 0x03
     e56:	fc 81       	ldd	r31, Y+4	; 0x04
     e58:	80 83       	st	Z, r24
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	80 31       	cpi	r24, 0x10	; 16
     e60:	c8 f0       	brcs	.+50     	; 0xe94 <DIO_enuReadPin+0xbc>
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	88 31       	cpi	r24, 0x18	; 24
     e66:	b0 f4       	brcc	.+44     	; 0xe94 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%8);
     e68:	e3 e3       	ldi	r30, 0x33	; 51
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	87 70       	andi	r24, 0x07	; 7
     e7a:	90 70       	andi	r25, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_enuReadPin+0xac>
     e80:	55 95       	asr	r21
     e82:	47 95       	ror	r20
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_enuReadPin+0xa8>
     e88:	ca 01       	movw	r24, r20
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	80 83       	st	Z, r24
     e92:	21 c0       	rjmp	.+66     	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 31       	cpi	r24, 0x18	; 24
     e98:	c8 f0       	brcs	.+50     	; 0xecc <DIO_enuReadPin+0xf4>
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	80 32       	cpi	r24, 0x20	; 32
     e9e:	b0 f4       	brcc	.+44     	; 0xecc <DIO_enuReadPin+0xf4>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%8);
     ea0:	e0 e3       	ldi	r30, 0x30	; 48
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	87 70       	andi	r24, 0x07	; 7
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_enuReadPin+0xe4>
     eb8:	55 95       	asr	r21
     eba:	47 95       	ror	r20
     ebc:	8a 95       	dec	r24
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_enuReadPin+0xe0>
     ec0:	ca 01       	movw	r24, r20
     ec2:	81 70       	andi	r24, 0x01	; 1
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	80 83       	st	Z, r24
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
	
}          
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy)        
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <DIO_enuStatePullup+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);	
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	6a 81       	ldd	r22, Y+2	; 0x02
     ef8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	27 97       	sbiw	r28, 0x07	; 7
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	7e 83       	std	Y+6, r23	; 0x06
     f20:	6d 83       	std	Y+5, r22	; 0x05
     f22:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK ;
     f24:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
     f26:	19 82       	std	Y+1, r1	; 0x01
     f28:	1d c0       	rjmp	.+58     	; 0xf64 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	40 81       	ld	r20, Z
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	90 81       	ld	r25, Z
     f4e:	84 2f       	mov	r24, r20
     f50:	69 2f       	mov	r22, r25
     f52:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
     f56:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc !=EOK)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	88 23       	and	r24, r24
     f5c:	39 f4       	brne	.+14     	; 0xf6c <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK ;
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	99 81       	ldd	r25, Y+1	; 0x01
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 17       	cp	r25, r24
     f6a:	f8 f2       	brcs	.-66     	; 0xf2a <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc !=EOK)
		{
			break;
		}
	}
	return enuReturnStateLoc;
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f6e:	27 96       	adiw	r28, 0x07	; 7
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	ce 58       	subi	r28, 0x8E	; 142
     f8e:	d0 40       	sbci	r29, 0x00	; 0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc = 0 ;
     f9a:	fe 01       	movw	r30, r28
     f9c:	e2 57       	subi	r30, 0x72	; 114
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	10 82       	st	Z, r1
	uint8 u8CmdLoc  = 0 ;
     fa2:	fe 01       	movw	r30, r28
     fa4:	e3 57       	subi	r30, 0x73	; 115
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	10 82       	st	Z, r1
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
     faa:	fe 01       	movw	r30, r28
     fac:	e2 57       	subi	r30, 0x72	; 114
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	10 82       	st	Z, r1
     fb2:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <LCD_voidInit+0x1072>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
     fb6:	fe 01       	movw	r30, r28
     fb8:	e2 57       	subi	r30, 0x72	; 114
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	c9 01       	movw	r24, r18
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	fc 01       	movw	r30, r24
     fd6:	e8 59       	subi	r30, 0x98	; 152
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	80 81       	ld	r24, Z
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <LCD_voidInit+0x64>
     fe2:	75 c4       	rjmp	.+2282   	; 0x18ce <LCD_voidInit+0x94e>
     fe4:	fe 01       	movw	r30, r28
     fe6:	e7 57       	subi	r30, 0x77	; 119
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 ef       	ldi	r26, 0xF0	; 240
     ff0:	b1 e4       	ldi	r27, 0x41	; 65
     ff2:	80 83       	st	Z, r24
     ff4:	91 83       	std	Z+1, r25	; 0x01
     ff6:	a2 83       	std	Z+2, r26	; 0x02
     ff8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffa:	8e 01       	movw	r16, r28
     ffc:	0b 57       	subi	r16, 0x7B	; 123
     ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    1000:	fe 01       	movw	r30, r28
    1002:	e7 57       	subi	r30, 0x77	; 119
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a ef       	ldi	r20, 0xFA	; 250
    1014:	54 e4       	ldi	r21, 0x44	; 68
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	f8 01       	movw	r30, r16
    1020:	80 83       	st	Z, r24
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	a2 83       	std	Z+2, r26	; 0x02
    1026:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1028:	fe 01       	movw	r30, r28
    102a:	eb 57       	subi	r30, 0x7B	; 123
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	60 81       	ld	r22, Z
    1030:	71 81       	ldd	r23, Z+1	; 0x01
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e8       	ldi	r20, 0x80	; 128
    103c:	5f e3       	ldi	r21, 0x3F	; 63
    103e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1042:	88 23       	and	r24, r24
    1044:	44 f4       	brge	.+16     	; 0x1056 <LCD_voidInit+0xd6>
		__ticks = 1;
    1046:	fe 01       	movw	r30, r28
    1048:	ed 57       	subi	r30, 0x7D	; 125
    104a:	ff 4f       	sbci	r31, 0xFF	; 255
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	80 83       	st	Z, r24
    1054:	64 c0       	rjmp	.+200    	; 0x111e <LCD_voidInit+0x19e>
	else if (__tmp > 65535)
    1056:	fe 01       	movw	r30, r28
    1058:	eb 57       	subi	r30, 0x7B	; 123
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	3f ef       	ldi	r19, 0xFF	; 255
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	57 e4       	ldi	r21, 0x47	; 71
    106c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1070:	18 16       	cp	r1, r24
    1072:	0c f0       	brlt	.+2      	; 0x1076 <LCD_voidInit+0xf6>
    1074:	43 c0       	rjmp	.+134    	; 0x10fc <LCD_voidInit+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1076:	fe 01       	movw	r30, r28
    1078:	e7 57       	subi	r30, 0x77	; 119
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e2       	ldi	r20, 0x20	; 32
    108a:	51 e4       	ldi	r21, 0x41	; 65
    108c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	8e 01       	movw	r16, r28
    1096:	0d 57       	subi	r16, 0x7D	; 125
    1098:	1f 4f       	sbci	r17, 0xFF	; 255
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	f8 01       	movw	r30, r16
    10a8:	91 83       	std	Z+1, r25	; 0x01
    10aa:	80 83       	st	Z, r24
    10ac:	1f c0       	rjmp	.+62     	; 0x10ec <LCD_voidInit+0x16c>
    10ae:	fe 01       	movw	r30, r28
    10b0:	ef 57       	subi	r30, 0x7F	; 127
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	88 ec       	ldi	r24, 0xC8	; 200
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10bc:	fe 01       	movw	r30, r28
    10be:	ef 57       	subi	r30, 0x7F	; 127
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	01 97       	sbiw	r24, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <LCD_voidInit+0x146>
    10ca:	fe 01       	movw	r30, r28
    10cc:	ef 57       	subi	r30, 0x7F	; 127
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d4:	de 01       	movw	r26, r28
    10d6:	ad 57       	subi	r26, 0x7D	; 125
    10d8:	bf 4f       	sbci	r27, 0xFF	; 255
    10da:	fe 01       	movw	r30, r28
    10dc:	ed 57       	subi	r30, 0x7D	; 125
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	9c 93       	st	X, r25
    10ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	fe 01       	movw	r30, r28
    10ee:	ed 57       	subi	r30, 0x7D	; 125
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	d1 f6       	brne	.-76     	; 0x10ae <LCD_voidInit+0x12e>
    10fa:	27 c0       	rjmp	.+78     	; 0x114a <LCD_voidInit+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fc:	8e 01       	movw	r16, r28
    10fe:	0d 57       	subi	r16, 0x7D	; 125
    1100:	1f 4f       	sbci	r17, 0xFF	; 255
    1102:	fe 01       	movw	r30, r28
    1104:	eb 57       	subi	r30, 0x7B	; 123
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1114:	dc 01       	movw	r26, r24
    1116:	cb 01       	movw	r24, r22
    1118:	f8 01       	movw	r30, r16
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
    111e:	de 01       	movw	r26, r28
    1120:	a1 58       	subi	r26, 0x81	; 129
    1122:	bf 4f       	sbci	r27, 0xFF	; 255
    1124:	fe 01       	movw	r30, r28
    1126:	ed 57       	subi	r30, 0x7D	; 125
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	8d 93       	st	X+, r24
    1130:	9c 93       	st	X, r25
    1132:	fe 01       	movw	r30, r28
    1134:	e1 58       	subi	r30, 0x81	; 129
    1136:	ff 4f       	sbci	r31, 0xFF	; 255
    1138:	80 81       	ld	r24, Z
    113a:	91 81       	ldd	r25, Z+1	; 0x01
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	f1 f7       	brne	.-4      	; 0x113c <LCD_voidInit+0x1bc>
    1140:	fe 01       	movw	r30, r28
    1142:	e1 58       	subi	r30, 0x81	; 129
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			u8CmdLoc = (0b00110000)  |
    114a:	fe 01       	movw	r30, r28
    114c:	e2 57       	subi	r30, 0x72	; 114
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c9 01       	movw	r24, r18
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	82 0f       	add	r24, r18
    115e:	93 1f       	adc	r25, r19
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	fc 01       	movw	r30, r24
    116a:	e8 59       	subi	r30, 0x98	; 152
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	86 95       	lsr	r24
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	48 2f       	mov	r20, r24
    1186:	40 63       	ori	r20, 0x30	; 48
    1188:	fe 01       	movw	r30, r28
    118a:	e2 57       	subi	r30, 0x72	; 114
    118c:	ff 4f       	sbci	r31, 0xFF	; 255
    118e:	80 81       	ld	r24, Z
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	c9 01       	movw	r24, r18
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	82 0f       	add	r24, r18
    119c:	93 1f       	adc	r25, r19
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	fc 01       	movw	r30, r24
    11a8:	e8 59       	subi	r30, 0x98	; 152
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	86 95       	lsr	r24
    11b0:	86 95       	lsr	r24
    11b2:	81 70       	andi	r24, 0x01	; 1
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	84 2b       	or	r24, r20
    11c2:	fe 01       	movw	r30, r28
    11c4:	e3 57       	subi	r30, 0x73	; 115
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 3 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 2 );
			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    11ca:	fe 01       	movw	r30, r28
    11cc:	e2 57       	subi	r30, 0x72	; 114
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	de 01       	movw	r26, r28
    11d2:	a3 57       	subi	r26, 0x73	; 115
    11d4:	bf 4f       	sbci	r27, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	6c 91       	ld	r22, X
    11da:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    11de:	fe 01       	movw	r30, r28
    11e0:	e5 58       	subi	r30, 0x85	; 133
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	a0 e8       	ldi	r26, 0x80	; 128
    11ea:	bf e3       	ldi	r27, 0x3F	; 63
    11ec:	80 83       	st	Z, r24
    11ee:	91 83       	std	Z+1, r25	; 0x01
    11f0:	a2 83       	std	Z+2, r26	; 0x02
    11f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	8e 01       	movw	r16, r28
    11f6:	09 58       	subi	r16, 0x89	; 137
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	fe 01       	movw	r30, r28
    11fc:	e5 58       	subi	r30, 0x85	; 133
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	4a ef       	ldi	r20, 0xFA	; 250
    120e:	54 e4       	ldi	r21, 0x44	; 68
    1210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	f8 01       	movw	r30, r16
    121a:	80 83       	st	Z, r24
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	a2 83       	std	Z+2, r26	; 0x02
    1220:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1222:	fe 01       	movw	r30, r28
    1224:	e9 58       	subi	r30, 0x89	; 137
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123c:	88 23       	and	r24, r24
    123e:	44 f4       	brge	.+16     	; 0x1250 <LCD_voidInit+0x2d0>
		__ticks = 1;
    1240:	fe 01       	movw	r30, r28
    1242:	eb 58       	subi	r30, 0x8B	; 139
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	80 83       	st	Z, r24
    124e:	64 c0       	rjmp	.+200    	; 0x1318 <LCD_voidInit+0x398>
	else if (__tmp > 65535)
    1250:	fe 01       	movw	r30, r28
    1252:	e9 58       	subi	r30, 0x89	; 137
    1254:	ff 4f       	sbci	r31, 0xFF	; 255
    1256:	60 81       	ld	r22, Z
    1258:	71 81       	ldd	r23, Z+1	; 0x01
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	3f ef       	ldi	r19, 0xFF	; 255
    1262:	4f e7       	ldi	r20, 0x7F	; 127
    1264:	57 e4       	ldi	r21, 0x47	; 71
    1266:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    126a:	18 16       	cp	r1, r24
    126c:	0c f0       	brlt	.+2      	; 0x1270 <LCD_voidInit+0x2f0>
    126e:	43 c0       	rjmp	.+134    	; 0x12f6 <LCD_voidInit+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1270:	fe 01       	movw	r30, r28
    1272:	e5 58       	subi	r30, 0x85	; 133
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	60 81       	ld	r22, Z
    1278:	71 81       	ldd	r23, Z+1	; 0x01
    127a:	82 81       	ldd	r24, Z+2	; 0x02
    127c:	93 81       	ldd	r25, Z+3	; 0x03
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e2       	ldi	r20, 0x20	; 32
    1284:	51 e4       	ldi	r21, 0x41	; 65
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	8e 01       	movw	r16, r28
    1290:	0b 58       	subi	r16, 0x8B	; 139
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	f8 01       	movw	r30, r16
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	80 83       	st	Z, r24
    12a6:	1f c0       	rjmp	.+62     	; 0x12e6 <LCD_voidInit+0x366>
    12a8:	fe 01       	movw	r30, r28
    12aa:	ed 58       	subi	r30, 0x8D	; 141
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	88 ec       	ldi	r24, 0xC8	; 200
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	91 83       	std	Z+1, r25	; 0x01
    12b4:	80 83       	st	Z, r24
    12b6:	fe 01       	movw	r30, r28
    12b8:	ed 58       	subi	r30, 0x8D	; 141
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <LCD_voidInit+0x340>
    12c4:	fe 01       	movw	r30, r28
    12c6:	ed 58       	subi	r30, 0x8D	; 141
    12c8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ce:	de 01       	movw	r26, r28
    12d0:	ab 58       	subi	r26, 0x8B	; 139
    12d2:	bf 4f       	sbci	r27, 0xFF	; 255
    12d4:	fe 01       	movw	r30, r28
    12d6:	eb 58       	subi	r30, 0x8B	; 139
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	80 81       	ld	r24, Z
    12dc:	91 81       	ldd	r25, Z+1	; 0x01
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	11 96       	adiw	r26, 0x01	; 1
    12e2:	9c 93       	st	X, r25
    12e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	fe 01       	movw	r30, r28
    12e8:	eb 58       	subi	r30, 0x8B	; 139
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	d1 f6       	brne	.-76     	; 0x12a8 <LCD_voidInit+0x328>
    12f4:	27 c0       	rjmp	.+78     	; 0x1344 <LCD_voidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f6:	8e 01       	movw	r16, r28
    12f8:	0b 58       	subi	r16, 0x8B	; 139
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	fe 01       	movw	r30, r28
    12fe:	e9 58       	subi	r30, 0x89	; 137
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	f8 01       	movw	r30, r16
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
    1318:	de 01       	movw	r26, r28
    131a:	af 58       	subi	r26, 0x8F	; 143
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	fe 01       	movw	r30, r28
    1320:	eb 58       	subi	r30, 0x8B	; 139
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	8d 93       	st	X+, r24
    132a:	9c 93       	st	X, r25
    132c:	fe 01       	movw	r30, r28
    132e:	ef 58       	subi	r30, 0x8F	; 143
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <LCD_voidInit+0x3b6>
    133a:	fe 01       	movw	r30, r28
    133c:	ef 58       	subi	r30, 0x8F	; 143
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			u8CmdLoc =   (0b00001000) |
    1344:	fe 01       	movw	r30, r28
    1346:	e2 57       	subi	r30, 0x72	; 114
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	c9 01       	movw	r24, r18
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	82 0f       	add	r24, r18
    1358:	93 1f       	adc	r25, r19
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	fc 01       	movw	r30, r24
    1364:	e8 59       	subi	r30, 0x98	; 152
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 81       	ld	r24, Z
    136a:	86 95       	lsr	r24
    136c:	86 95       	lsr	r24
    136e:	86 95       	lsr	r24
    1370:	81 70       	andi	r24, 0x01	; 1
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	48 2f       	mov	r20, r24
    1380:	48 60       	ori	r20, 0x08	; 8
    1382:	fe 01       	movw	r30, r28
    1384:	e2 57       	subi	r30, 0x72	; 114
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	c9 01       	movw	r24, r18
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	fc 01       	movw	r30, r24
    13a2:	e8 59       	subi	r30, 0x98	; 152
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	82 95       	swap	r24
    13aa:	8f 70       	andi	r24, 0x0F	; 15
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	48 2b       	or	r20, r24
    13b8:	fe 01       	movw	r30, r28
    13ba:	e2 57       	subi	r30, 0x72	; 114
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	80 81       	ld	r24, Z
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	c9 01       	movw	r24, r18
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	82 0f       	add	r24, r18
    13cc:	93 1f       	adc	r25, r19
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	fc 01       	movw	r30, r24
    13d8:	e8 59       	subi	r30, 0x98	; 152
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	82 95       	swap	r24
    13e0:	86 95       	lsr	r24
    13e2:	87 70       	andi	r24, 0x07	; 7
    13e4:	81 70       	andi	r24, 0x01	; 1
    13e6:	84 2b       	or	r24, r20
    13e8:	fe 01       	movw	r30, r28
    13ea:	e3 57       	subi	r30, 0x73	; 115
    13ec:	ff 4f       	sbci	r31, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 2 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 1 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 0 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    13f0:	fe 01       	movw	r30, r28
    13f2:	e2 57       	subi	r30, 0x72	; 114
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	de 01       	movw	r26, r28
    13f8:	a3 57       	subi	r26, 0x73	; 115
    13fa:	bf 4f       	sbci	r27, 0xFF	; 255
    13fc:	80 81       	ld	r24, Z
    13fe:	6c 91       	ld	r22, X
    1400:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1404:	fe 01       	movw	r30, r28
    1406:	e3 59       	subi	r30, 0x93	; 147
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e8       	ldi	r26, 0x80	; 128
    1410:	bf e3       	ldi	r27, 0x3F	; 63
    1412:	80 83       	st	Z, r24
    1414:	91 83       	std	Z+1, r25	; 0x01
    1416:	a2 83       	std	Z+2, r26	; 0x02
    1418:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141a:	8e 01       	movw	r16, r28
    141c:	07 59       	subi	r16, 0x97	; 151
    141e:	1f 4f       	sbci	r17, 0xFF	; 255
    1420:	fe 01       	movw	r30, r28
    1422:	e3 59       	subi	r30, 0x93	; 147
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	4a ef       	ldi	r20, 0xFA	; 250
    1434:	54 e4       	ldi	r21, 0x44	; 68
    1436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	f8 01       	movw	r30, r16
    1440:	80 83       	st	Z, r24
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	a2 83       	std	Z+2, r26	; 0x02
    1446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1448:	fe 01       	movw	r30, r28
    144a:	e7 59       	subi	r30, 0x97	; 151
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1462:	88 23       	and	r24, r24
    1464:	44 f4       	brge	.+16     	; 0x1476 <LCD_voidInit+0x4f6>
		__ticks = 1;
    1466:	fe 01       	movw	r30, r28
    1468:	e9 59       	subi	r30, 0x99	; 153
    146a:	ff 4f       	sbci	r31, 0xFF	; 255
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
    1474:	64 c0       	rjmp	.+200    	; 0x153e <LCD_voidInit+0x5be>
	else if (__tmp > 65535)
    1476:	fe 01       	movw	r30, r28
    1478:	e7 59       	subi	r30, 0x97	; 151
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	0c f0       	brlt	.+2      	; 0x1496 <LCD_voidInit+0x516>
    1494:	43 c0       	rjmp	.+134    	; 0x151c <LCD_voidInit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1496:	fe 01       	movw	r30, r28
    1498:	e3 59       	subi	r30, 0x93	; 147
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8e 01       	movw	r16, r28
    14b6:	09 59       	subi	r16, 0x99	; 153
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	f8 01       	movw	r30, r16
    14c8:	91 83       	std	Z+1, r25	; 0x01
    14ca:	80 83       	st	Z, r24
    14cc:	1f c0       	rjmp	.+62     	; 0x150c <LCD_voidInit+0x58c>
    14ce:	fe 01       	movw	r30, r28
    14d0:	eb 59       	subi	r30, 0x9B	; 155
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	88 ec       	ldi	r24, 0xC8	; 200
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	91 83       	std	Z+1, r25	; 0x01
    14da:	80 83       	st	Z, r24
    14dc:	fe 01       	movw	r30, r28
    14de:	eb 59       	subi	r30, 0x9B	; 155
    14e0:	ff 4f       	sbci	r31, 0xFF	; 255
    14e2:	80 81       	ld	r24, Z
    14e4:	91 81       	ldd	r25, Z+1	; 0x01
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_voidInit+0x566>
    14ea:	fe 01       	movw	r30, r28
    14ec:	eb 59       	subi	r30, 0x9B	; 155
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f4:	de 01       	movw	r26, r28
    14f6:	a9 59       	subi	r26, 0x99	; 153
    14f8:	bf 4f       	sbci	r27, 0xFF	; 255
    14fa:	fe 01       	movw	r30, r28
    14fc:	e9 59       	subi	r30, 0x99	; 153
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	9c 93       	st	X, r25
    150a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	fe 01       	movw	r30, r28
    150e:	e9 59       	subi	r30, 0x99	; 153
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	80 81       	ld	r24, Z
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	d1 f6       	brne	.-76     	; 0x14ce <LCD_voidInit+0x54e>
    151a:	27 c0       	rjmp	.+78     	; 0x156a <LCD_voidInit+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	8e 01       	movw	r16, r28
    151e:	09 59       	subi	r16, 0x99	; 153
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	fe 01       	movw	r30, r28
    1524:	e7 59       	subi	r30, 0x97	; 151
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	60 81       	ld	r22, Z
    152a:	71 81       	ldd	r23, Z+1	; 0x01
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	93 81       	ldd	r25, Z+3	; 0x03
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	f8 01       	movw	r30, r16
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	de 01       	movw	r26, r28
    1540:	ad 59       	subi	r26, 0x9D	; 157
    1542:	bf 4f       	sbci	r27, 0xFF	; 255
    1544:	fe 01       	movw	r30, r28
    1546:	e9 59       	subi	r30, 0x99	; 153
    1548:	ff 4f       	sbci	r31, 0xFF	; 255
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	8d 93       	st	X+, r24
    1550:	9c 93       	st	X, r25
    1552:	fe 01       	movw	r30, r28
    1554:	ed 59       	subi	r30, 0x9D	; 157
    1556:	ff 4f       	sbci	r31, 0xFF	; 255
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <LCD_voidInit+0x5dc>
    1560:	fe 01       	movw	r30, r28
    1562:	ed 59       	subi	r30, 0x9D	; 157
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0x01);
    156a:	fe 01       	movw	r30, r28
    156c:	e2 57       	subi	r30, 0x72	; 114
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1578:	fe 01       	movw	r30, r28
    157a:	e1 5a       	subi	r30, 0xA1	; 161
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e4       	ldi	r26, 0x40	; 64
    1584:	b0 e4       	ldi	r27, 0x40	; 64
    1586:	80 83       	st	Z, r24
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	a2 83       	std	Z+2, r26	; 0x02
    158c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	8e 01       	movw	r16, r28
    1590:	05 5a       	subi	r16, 0xA5	; 165
    1592:	1f 4f       	sbci	r17, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	e1 5a       	subi	r30, 0xA1	; 161
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	60 81       	ld	r22, Z
    159c:	71 81       	ldd	r23, Z+1	; 0x01
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	93 81       	ldd	r25, Z+3	; 0x03
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	4a ef       	ldi	r20, 0xFA	; 250
    15a8:	54 e4       	ldi	r21, 0x44	; 68
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	f8 01       	movw	r30, r16
    15b4:	80 83       	st	Z, r24
    15b6:	91 83       	std	Z+1, r25	; 0x01
    15b8:	a2 83       	std	Z+2, r26	; 0x02
    15ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15bc:	fe 01       	movw	r30, r28
    15be:	e5 5a       	subi	r30, 0xA5	; 165
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e8       	ldi	r20, 0x80	; 128
    15d0:	5f e3       	ldi	r21, 0x3F	; 63
    15d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d6:	88 23       	and	r24, r24
    15d8:	44 f4       	brge	.+16     	; 0x15ea <LCD_voidInit+0x66a>
		__ticks = 1;
    15da:	fe 01       	movw	r30, r28
    15dc:	e7 5a       	subi	r30, 0xA7	; 167
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
    15e8:	64 c0       	rjmp	.+200    	; 0x16b2 <LCD_voidInit+0x732>
	else if (__tmp > 65535)
    15ea:	fe 01       	movw	r30, r28
    15ec:	e5 5a       	subi	r30, 0xA5	; 165
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	0c f0       	brlt	.+2      	; 0x160a <LCD_voidInit+0x68a>
    1608:	43 c0       	rjmp	.+134    	; 0x1690 <LCD_voidInit+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160a:	fe 01       	movw	r30, r28
    160c:	e1 5a       	subi	r30, 0xA1	; 161
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8e 01       	movw	r16, r28
    162a:	07 5a       	subi	r16, 0xA7	; 167
    162c:	1f 4f       	sbci	r17, 0xFF	; 255
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	f8 01       	movw	r30, r16
    163c:	91 83       	std	Z+1, r25	; 0x01
    163e:	80 83       	st	Z, r24
    1640:	1f c0       	rjmp	.+62     	; 0x1680 <LCD_voidInit+0x700>
    1642:	fe 01       	movw	r30, r28
    1644:	e9 5a       	subi	r30, 0xA9	; 169
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	88 ec       	ldi	r24, 0xC8	; 200
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	91 83       	std	Z+1, r25	; 0x01
    164e:	80 83       	st	Z, r24
    1650:	fe 01       	movw	r30, r28
    1652:	e9 5a       	subi	r30, 0xA9	; 169
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	80 81       	ld	r24, Z
    1658:	91 81       	ldd	r25, Z+1	; 0x01
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_voidInit+0x6da>
    165e:	fe 01       	movw	r30, r28
    1660:	e9 5a       	subi	r30, 0xA9	; 169
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1668:	de 01       	movw	r26, r28
    166a:	a7 5a       	subi	r26, 0xA7	; 167
    166c:	bf 4f       	sbci	r27, 0xFF	; 255
    166e:	fe 01       	movw	r30, r28
    1670:	e7 5a       	subi	r30, 0xA7	; 167
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	11 96       	adiw	r26, 0x01	; 1
    167c:	9c 93       	st	X, r25
    167e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	fe 01       	movw	r30, r28
    1682:	e7 5a       	subi	r30, 0xA7	; 167
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 81       	ld	r24, Z
    1688:	91 81       	ldd	r25, Z+1	; 0x01
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	d1 f6       	brne	.-76     	; 0x1642 <LCD_voidInit+0x6c2>
    168e:	27 c0       	rjmp	.+78     	; 0x16de <LCD_voidInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	8e 01       	movw	r16, r28
    1692:	07 5a       	subi	r16, 0xA7	; 167
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	fe 01       	movw	r30, r28
    1698:	e5 5a       	subi	r30, 0xA5	; 165
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	f8 01       	movw	r30, r16
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	de 01       	movw	r26, r28
    16b4:	ab 5a       	subi	r26, 0xAB	; 171
    16b6:	bf 4f       	sbci	r27, 0xFF	; 255
    16b8:	fe 01       	movw	r30, r28
    16ba:	e7 5a       	subi	r30, 0xA7	; 167
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	8d 93       	st	X+, r24
    16c4:	9c 93       	st	X, r25
    16c6:	fe 01       	movw	r30, r28
    16c8:	eb 5a       	subi	r30, 0xAB	; 171
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <LCD_voidInit+0x750>
    16d4:	fe 01       	movw	r30, r28
    16d6:	eb 5a       	subi	r30, 0xAB	; 171
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			u8CmdLoc =   (0b00000100) |
    16de:	fe 01       	movw	r30, r28
    16e0:	e2 57       	subi	r30, 0x72	; 114
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	c9 01       	movw	r24, r18
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	82 0f       	add	r24, r18
    16f2:	93 1f       	adc	r25, r19
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	fc 01       	movw	r30, r24
    16fe:	e8 59       	subi	r30, 0x98	; 152
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	82 95       	swap	r24
    1706:	86 95       	lsr	r24
    1708:	86 95       	lsr	r24
    170a:	83 70       	andi	r24, 0x03	; 3
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	48 2f       	mov	r20, r24
    1718:	44 60       	ori	r20, 0x04	; 4
    171a:	fe 01       	movw	r30, r28
    171c:	e2 57       	subi	r30, 0x72	; 114
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	c9 01       	movw	r24, r18
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	fc 01       	movw	r30, r24
    173a:	e8 59       	subi	r30, 0x98	; 152
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	88 1f       	adc	r24, r24
    1742:	88 27       	eor	r24, r24
    1744:	88 1f       	adc	r24, r24
    1746:	84 2b       	or	r24, r20
    1748:	fe 01       	movw	r30, r28
    174a:	e3 57       	subi	r30, 0x73	; 115
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 1 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 0 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1750:	fe 01       	movw	r30, r28
    1752:	e2 57       	subi	r30, 0x72	; 114
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	de 01       	movw	r26, r28
    1758:	a3 57       	subi	r26, 0x73	; 115
    175a:	bf 4f       	sbci	r27, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	6c 91       	ld	r22, X
    1760:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1764:	fe 01       	movw	r30, r28
    1766:	ef 5a       	subi	r30, 0xAF	; 175
    1768:	ff 4f       	sbci	r31, 0xFF	; 255
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 e4       	ldi	r26, 0x40	; 64
    1770:	b0 e4       	ldi	r27, 0x40	; 64
    1772:	80 83       	st	Z, r24
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	a2 83       	std	Z+2, r26	; 0x02
    1778:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	8e 01       	movw	r16, r28
    177c:	03 5b       	subi	r16, 0xB3	; 179
    177e:	1f 4f       	sbci	r17, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	ef 5a       	subi	r30, 0xAF	; 175
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a ef       	ldi	r20, 0xFA	; 250
    1794:	54 e4       	ldi	r21, 0x44	; 68
    1796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	f8 01       	movw	r30, r16
    17a0:	80 83       	st	Z, r24
    17a2:	91 83       	std	Z+1, r25	; 0x01
    17a4:	a2 83       	std	Z+2, r26	; 0x02
    17a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a8:	fe 01       	movw	r30, r28
    17aa:	e3 5b       	subi	r30, 0xB3	; 179
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	44 f4       	brge	.+16     	; 0x17d6 <LCD_voidInit+0x856>
		__ticks = 1;
    17c6:	fe 01       	movw	r30, r28
    17c8:	e5 5b       	subi	r30, 0xB5	; 181
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	80 83       	st	Z, r24
    17d4:	64 c0       	rjmp	.+200    	; 0x189e <LCD_voidInit+0x91e>
	else if (__tmp > 65535)
    17d6:	fe 01       	movw	r30, r28
    17d8:	e3 5b       	subi	r30, 0xB3	; 179
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	0c f0       	brlt	.+2      	; 0x17f6 <LCD_voidInit+0x876>
    17f4:	43 c0       	rjmp	.+134    	; 0x187c <LCD_voidInit+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f6:	fe 01       	movw	r30, r28
    17f8:	ef 5a       	subi	r30, 0xAF	; 175
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	93 81       	ldd	r25, Z+3	; 0x03
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e2       	ldi	r20, 0x20	; 32
    180a:	51 e4       	ldi	r21, 0x41	; 65
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8e 01       	movw	r16, r28
    1816:	05 5b       	subi	r16, 0xB5	; 181
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
    182c:	1f c0       	rjmp	.+62     	; 0x186c <LCD_voidInit+0x8ec>
    182e:	fe 01       	movw	r30, r28
    1830:	e7 5b       	subi	r30, 0xB7	; 183
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	88 ec       	ldi	r24, 0xC8	; 200
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	80 83       	st	Z, r24
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <LCD_voidInit+0x8c6>
    184a:	fe 01       	movw	r30, r28
    184c:	e7 5b       	subi	r30, 0xB7	; 183
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1854:	de 01       	movw	r26, r28
    1856:	a5 5b       	subi	r26, 0xB5	; 181
    1858:	bf 4f       	sbci	r27, 0xFF	; 255
    185a:	fe 01       	movw	r30, r28
    185c:	e5 5b       	subi	r30, 0xB5	; 181
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	11 96       	adiw	r26, 0x01	; 1
    1868:	9c 93       	st	X, r25
    186a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	fe 01       	movw	r30, r28
    186e:	e5 5b       	subi	r30, 0xB5	; 181
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	d1 f6       	brne	.-76     	; 0x182e <LCD_voidInit+0x8ae>
    187a:	b2 c3       	rjmp	.+1892   	; 0x1fe0 <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	8e 01       	movw	r16, r28
    187e:	05 5b       	subi	r16, 0xB5	; 181
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e3 5b       	subi	r30, 0xB3	; 179
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	f8 01       	movw	r30, r16
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
    189e:	de 01       	movw	r26, r28
    18a0:	a9 5b       	subi	r26, 0xB9	; 185
    18a2:	bf 4f       	sbci	r27, 0xFF	; 255
    18a4:	fe 01       	movw	r30, r28
    18a6:	e5 5b       	subi	r30, 0xB5	; 181
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	11 96       	adiw	r26, 0x01	; 1
    18b0:	9c 93       	st	X, r25
    18b2:	8e 93       	st	-X, r24
    18b4:	fe 01       	movw	r30, r28
    18b6:	e9 5b       	subi	r30, 0xB9	; 185
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 81       	ld	r24, Z
    18bc:	91 81       	ldd	r25, Z+1	; 0x01
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <LCD_voidInit+0x93e>
    18c2:	fe 01       	movw	r30, r28
    18c4:	e9 5b       	subi	r30, 0xB9	; 185
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	89 c3       	rjmp	.+1810   	; 0x1fe0 <LCD_voidInit+0x1060>
    18ce:	fe 01       	movw	r30, r28
    18d0:	ed 5b       	subi	r30, 0xBD	; 189
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a0 ef       	ldi	r26, 0xF0	; 240
    18da:	b1 e4       	ldi	r27, 0x41	; 65
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	8e 01       	movw	r16, r28
    18e6:	01 5c       	subi	r16, 0xC1	; 193
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	fe 01       	movw	r30, r28
    18ec:	ed 5b       	subi	r30, 0xBD	; 189
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a ef       	ldi	r20, 0xFA	; 250
    18fe:	54 e4       	ldi	r21, 0x44	; 68
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	f8 01       	movw	r30, r16
    190a:	80 83       	st	Z, r24
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	a2 83       	std	Z+2, r26	; 0x02
    1910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1912:	fe 01       	movw	r30, r28
    1914:	ff 96       	adiw	r30, 0x3f	; 63
    1916:	60 81       	ld	r22, Z
    1918:	71 81       	ldd	r23, Z+1	; 0x01
    191a:	82 81       	ldd	r24, Z+2	; 0x02
    191c:	93 81       	ldd	r25, Z+3	; 0x03
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_voidInit+0x9b8>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9e af       	std	Y+62, r25	; 0x3e
    1934:	8d af       	std	Y+61, r24	; 0x3d
    1936:	46 c0       	rjmp	.+140    	; 0x19c4 <LCD_voidInit+0xa44>
	else if (__tmp > 65535)
    1938:	fe 01       	movw	r30, r28
    193a:	ff 96       	adiw	r30, 0x3f	; 63
    193c:	60 81       	ld	r22, Z
    193e:	71 81       	ldd	r23, Z+1	; 0x01
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	4f e7       	ldi	r20, 0x7F	; 127
    194a:	57 e4       	ldi	r21, 0x47	; 71
    194c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1950:	18 16       	cp	r1, r24
    1952:	64 f5       	brge	.+88     	; 0x19ac <LCD_voidInit+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1954:	fe 01       	movw	r30, r28
    1956:	ed 5b       	subi	r30, 0xBD	; 189
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e af       	std	Y+62, r25	; 0x3e
    1980:	8d af       	std	Y+61, r24	; 0x3d
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_voidInit+0xa22>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c af       	std	Y+60, r25	; 0x3c
    198a:	8b af       	std	Y+59, r24	; 0x3b
    198c:	8b ad       	ldd	r24, Y+59	; 0x3b
    198e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_voidInit+0xa10>
    1994:	9c af       	std	Y+60, r25	; 0x3c
    1996:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d ad       	ldd	r24, Y+61	; 0x3d
    199a:	9e ad       	ldd	r25, Y+62	; 0x3e
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e af       	std	Y+62, r25	; 0x3e
    19a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_voidInit+0xa04>
    19aa:	16 c0       	rjmp	.+44     	; 0x19d8 <LCD_voidInit+0xa58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	fe 01       	movw	r30, r28
    19ae:	ff 96       	adiw	r30, 0x3f	; 63
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e af       	std	Y+62, r25	; 0x3e
    19c2:	8d af       	std	Y+61, r24	; 0x3d
    19c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c8:	9a af       	std	Y+58, r25	; 0x3a
    19ca:	89 af       	std	Y+57, r24	; 0x39
    19cc:	89 ad       	ldd	r24, Y+57	; 0x39
    19ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_voidInit+0xa50>
    19d4:	9a af       	std	Y+58, r25	; 0x3a
    19d6:	89 af       	std	Y+57, r24	; 0x39
		else 
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			voidWriteCmd(u8CntrLoc , 0b00100000);
    19d8:	fe 01       	movw	r30, r28
    19da:	e2 57       	subi	r30, 0x72	; 114
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	80 81       	ld	r24, Z
    19e0:	60 e2       	ldi	r22, 0x20	; 32
    19e2:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00100000);
    19e6:	fe 01       	movw	r30, r28
    19e8:	e2 57       	subi	r30, 0x72	; 114
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	80 81       	ld	r24, Z
    19ee:	60 e2       	ldi	r22, 0x20	; 32
    19f0:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
			u8CmdLoc = (0b00100000)  |
    19f4:	fe 01       	movw	r30, r28
    19f6:	e2 57       	subi	r30, 0x72	; 114
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	80 81       	ld	r24, Z
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	c9 01       	movw	r24, r18
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	fc 01       	movw	r30, r24
    1a14:	e8 59       	subi	r30, 0x98	; 152
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	86 95       	lsr	r24
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	88 2f       	mov	r24, r24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	96 95       	lsr	r25
    1a24:	98 2f       	mov	r25, r24
    1a26:	88 27       	eor	r24, r24
    1a28:	97 95       	ror	r25
    1a2a:	87 95       	ror	r24
    1a2c:	48 2f       	mov	r20, r24
    1a2e:	40 62       	ori	r20, 0x20	; 32
    1a30:	fe 01       	movw	r30, r28
    1a32:	e2 57       	subi	r30, 0x72	; 114
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	82 0f       	add	r24, r18
    1a44:	93 1f       	adc	r25, r19
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e8 59       	subi	r30, 0x98	; 152
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	80 81       	ld	r24, Z
    1a56:	86 95       	lsr	r24
    1a58:	86 95       	lsr	r24
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	00 24       	eor	r0, r0
    1a62:	96 95       	lsr	r25
    1a64:	87 95       	ror	r24
    1a66:	07 94       	ror	r0
    1a68:	96 95       	lsr	r25
    1a6a:	87 95       	ror	r24
    1a6c:	07 94       	ror	r0
    1a6e:	98 2f       	mov	r25, r24
    1a70:	80 2d       	mov	r24, r0
    1a72:	84 2b       	or	r24, r20
    1a74:	fe 01       	movw	r30, r28
    1a76:	e3 57       	subi	r30, 0x73	; 115
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 7 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 6 );
			
		    voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e2 57       	subi	r30, 0x72	; 114
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	de 01       	movw	r26, r28
    1a84:	a3 57       	subi	r26, 0x73	; 115
    1a86:	bf 4f       	sbci	r27, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	6c 91       	ld	r22, X
    1a8c:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e8       	ldi	r26, 0x80	; 128
    1a96:	bf e3       	ldi	r27, 0x3F	; 63
    1a98:	8d ab       	std	Y+53, r24	; 0x35
    1a9a:	9e ab       	std	Y+54, r25	; 0x36
    1a9c:	af ab       	std	Y+55, r26	; 0x37
    1a9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa2:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa4:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa6:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a ef       	ldi	r20, 0xFA	; 250
    1aae:	54 e4       	ldi	r21, 0x44	; 68
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	89 ab       	std	Y+49, r24	; 0x31
    1aba:	9a ab       	std	Y+50, r25	; 0x32
    1abc:	ab ab       	std	Y+51, r26	; 0x33
    1abe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <LCD_voidInit+0xb62>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	98 ab       	std	Y+48, r25	; 0x30
    1ade:	8f a7       	std	Y+47, r24	; 0x2f
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <LCD_voidInit+0xbe0>
	else if (__tmp > 65535)
    1ae2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae8:	9c a9       	ldd	r25, Y+52	; 0x34
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <LCD_voidInit+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	6d a9       	ldd	r22, Y+53	; 0x35
    1afc:	7e a9       	ldd	r23, Y+54	; 0x36
    1afe:	8f a9       	ldd	r24, Y+55	; 0x37
    1b00:	98 ad       	ldd	r25, Y+56	; 0x38
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	98 ab       	std	Y+48, r25	; 0x30
    1b20:	8f a7       	std	Y+47, r24	; 0x2f
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <LCD_voidInit+0xbc2>
    1b24:	88 ec       	ldi	r24, 0xC8	; 200
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9e a7       	std	Y+46, r25	; 0x2e
    1b2a:	8d a7       	std	Y+45, r24	; 0x2d
    1b2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_voidInit+0xbb0>
    1b34:	9e a7       	std	Y+46, r25	; 0x2e
    1b36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	98 ab       	std	Y+48, r25	; 0x30
    1b40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b44:	98 a9       	ldd	r25, Y+48	; 0x30
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <LCD_voidInit+0xba4>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <LCD_voidInit+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b50:	8b a9       	ldd	r24, Y+51	; 0x33
    1b52:	9c a9       	ldd	r25, Y+52	; 0x34
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	98 ab       	std	Y+48, r25	; 0x30
    1b5e:	8f a7       	std	Y+47, r24	; 0x2f
    1b60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b62:	98 a9       	ldd	r25, Y+48	; 0x30
    1b64:	9c a7       	std	Y+44, r25	; 0x2c
    1b66:	8b a7       	std	Y+43, r24	; 0x2b
    1b68:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_voidInit+0xbec>
    1b70:	9c a7       	std	Y+44, r25	; 0x2c
    1b72:	8b a7       	std	Y+43, r24	; 0x2b
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1b74:	fe 01       	movw	r30, r28
    1b76:	e2 57       	subi	r30, 0x72	; 114
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
			
			u8CmdLoc =   (0b10000000) |
    1b82:	fe 01       	movw	r30, r28
    1b84:	e2 57       	subi	r30, 0x72	; 114
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 81       	ld	r24, Z
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	c9 01       	movw	r24, r18
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	82 0f       	add	r24, r18
    1b96:	93 1f       	adc	r25, r19
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	e8 59       	subi	r30, 0x98	; 152
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	86 95       	lsr	r24
    1baa:	86 95       	lsr	r24
    1bac:	86 95       	lsr	r24
    1bae:	81 70       	andi	r24, 0x01	; 1
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	00 24       	eor	r0, r0
    1bb6:	96 95       	lsr	r25
    1bb8:	87 95       	ror	r24
    1bba:	07 94       	ror	r0
    1bbc:	96 95       	lsr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	07 94       	ror	r0
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	80 2d       	mov	r24, r0
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	40 68       	ori	r20, 0x80	; 128
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e2 57       	subi	r30, 0x72	; 114
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	c9 01       	movw	r24, r18
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	82 0f       	add	r24, r18
    1bde:	93 1f       	adc	r25, r19
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	fc 01       	movw	r30, r24
    1bea:	e8 59       	subi	r30, 0x98	; 152
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	82 95       	swap	r24
    1bf2:	8f 70       	andi	r24, 0x0F	; 15
    1bf4:	81 70       	andi	r24, 0x01	; 1
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	82 95       	swap	r24
    1c00:	92 95       	swap	r25
    1c02:	90 7f       	andi	r25, 0xF0	; 240
    1c04:	98 27       	eor	r25, r24
    1c06:	80 7f       	andi	r24, 0xF0	; 240
    1c08:	98 27       	eor	r25, r24
    1c0a:	48 2b       	or	r20, r24
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e2 57       	subi	r30, 0x72	; 114
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	c9 01       	movw	r24, r18
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e8 59       	subi	r30, 0x98	; 152
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	82 95       	swap	r24
    1c34:	86 95       	lsr	r24
    1c36:	87 70       	andi	r24, 0x07	; 7
    1c38:	81 70       	andi	r24, 0x01	; 1
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	82 95       	swap	r24
    1c40:	92 95       	swap	r25
    1c42:	90 7f       	andi	r25, 0xF0	; 240
    1c44:	98 27       	eor	r25, r24
    1c46:	80 7f       	andi	r24, 0xF0	; 240
    1c48:	98 27       	eor	r25, r24
    1c4a:	84 2b       	or	r24, r20
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	e3 57       	subi	r30, 0x73	; 115
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 6 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 5 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 4 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1c54:	fe 01       	movw	r30, r28
    1c56:	e2 57       	subi	r30, 0x72	; 114
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	de 01       	movw	r26, r28
    1c5c:	a3 57       	subi	r26, 0x73	; 115
    1c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	6c 91       	ld	r22, X
    1c64:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	a0 e8       	ldi	r26, 0x80	; 128
    1c6e:	bf e3       	ldi	r27, 0x3F	; 63
    1c70:	8f a3       	std	Y+39, r24	; 0x27
    1c72:	98 a7       	std	Y+40, r25	; 0x28
    1c74:	a9 a7       	std	Y+41, r26	; 0x29
    1c76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c78:	6f a1       	ldd	r22, Y+39	; 0x27
    1c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	4a ef       	ldi	r20, 0xFA	; 250
    1c86:	54 e4       	ldi	r21, 0x44	; 68
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	8b a3       	std	Y+35, r24	; 0x23
    1c92:	9c a3       	std	Y+36, r25	; 0x24
    1c94:	ad a3       	std	Y+37, r26	; 0x25
    1c96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c98:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e8       	ldi	r20, 0x80	; 128
    1ca6:	5f e3       	ldi	r21, 0x3F	; 63
    1ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cac:	88 23       	and	r24, r24
    1cae:	2c f4       	brge	.+10     	; 0x1cba <LCD_voidInit+0xd3a>
		__ticks = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9a a3       	std	Y+34, r25	; 0x22
    1cb6:	89 a3       	std	Y+33, r24	; 0x21
    1cb8:	3f c0       	rjmp	.+126    	; 0x1d38 <LCD_voidInit+0xdb8>
	else if (__tmp > 65535)
    1cba:	6b a1       	ldd	r22, Y+35	; 0x23
    1cbc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbe:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cce:	18 16       	cp	r1, r24
    1cd0:	4c f5       	brge	.+82     	; 0x1d24 <LCD_voidInit+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e2       	ldi	r20, 0x20	; 32
    1ce0:	51 e4       	ldi	r21, 0x41	; 65
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	bc 01       	movw	r22, r24
    1cec:	cd 01       	movw	r24, r26
    1cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
    1cfa:	0f c0       	rjmp	.+30     	; 0x1d1a <LCD_voidInit+0xd9a>
    1cfc:	88 ec       	ldi	r24, 0xC8	; 200
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	98 a3       	std	Y+32, r25	; 0x20
    1d02:	8f 8f       	std	Y+31, r24	; 0x1f
    1d04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d06:	98 a1       	ldd	r25, Y+32	; 0x20
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_voidInit+0xd88>
    1d0c:	98 a3       	std	Y+32, r25	; 0x20
    1d0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d10:	89 a1       	ldd	r24, Y+33	; 0x21
    1d12:	9a a1       	ldd	r25, Y+34	; 0x22
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	9a a3       	std	Y+34, r25	; 0x22
    1d18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	69 f7       	brne	.-38     	; 0x1cfc <LCD_voidInit+0xd7c>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <LCD_voidInit+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d24:	6b a1       	ldd	r22, Y+35	; 0x23
    1d26:	7c a1       	ldd	r23, Y+36	; 0x24
    1d28:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	89 a3       	std	Y+33, r24	; 0x21
    1d38:	89 a1       	ldd	r24, Y+33	; 0x21
    1d3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <LCD_voidInit+0xdc4>
    1d48:	9e 8f       	std	Y+30, r25	; 0x1e
    1d4a:	8d 8f       	std	Y+29, r24	; 0x1d
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e2 57       	subi	r30, 0x72	; 114
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00010000);
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e2 57       	subi	r30, 0x72	; 114
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 81       	ld	r24, Z
    1d62:	60 e1       	ldi	r22, 0x10	; 16
    1d64:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e4       	ldi	r26, 0x40	; 64
    1d6e:	b0 e4       	ldi	r27, 0x40	; 64
    1d70:	89 8f       	std	Y+25, r24	; 0x19
    1d72:	9a 8f       	std	Y+26, r25	; 0x1a
    1d74:	ab 8f       	std	Y+27, r26	; 0x1b
    1d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8d 8b       	std	Y+21, r24	; 0x15
    1d92:	9e 8b       	std	Y+22, r25	; 0x16
    1d94:	af 8b       	std	Y+23, r26	; 0x17
    1d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d98:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_voidInit+0xe3a>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_voidInit+0xeb8>
	else if (__tmp > 65535)
    1dba:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_voidInit+0xea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_voidInit+0xe9a>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	89 8b       	std	Y+17, r24	; 0x11
    1e04:	89 89       	ldd	r24, Y+17	; 0x11
    1e06:	9a 89       	ldd	r25, Y+18	; 0x12
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_voidInit+0xe88>
    1e0c:	9a 8b       	std	Y+18, r25	; 0x12
    1e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8b 89       	ldd	r24, Y+19	; 0x13
    1e12:	9c 89       	ldd	r25, Y+20	; 0x14
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_voidInit+0xe7c>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_voidInit+0xecc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9c 8b       	std	Y+20, r25	; 0x14
    1e36:	8b 8b       	std	Y+19, r24	; 0x13
    1e38:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3c:	98 8b       	std	Y+16, r25	; 0x10
    1e3e:	8f 87       	std	Y+15, r24	; 0x0f
    1e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e42:	98 89       	ldd	r25, Y+16	; 0x10
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_voidInit+0xec4>
    1e48:	98 8b       	std	Y+16, r25	; 0x10
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	e2 57       	subi	r30, 0x72	; 114
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
			u8CmdLoc =   (0b01000000) |
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	e2 57       	subi	r30, 0x72	; 114
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	c9 01       	movw	r24, r18
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	82 0f       	add	r24, r18
    1e6e:	93 1f       	adc	r25, r19
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e8 59       	subi	r30, 0x98	; 152
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	82 95       	swap	r24
    1e82:	86 95       	lsr	r24
    1e84:	86 95       	lsr	r24
    1e86:	83 70       	andi	r24, 0x03	; 3
    1e88:	81 70       	andi	r24, 0x01	; 1
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	82 95       	swap	r24
    1e94:	92 95       	swap	r25
    1e96:	90 7f       	andi	r25, 0xF0	; 240
    1e98:	98 27       	eor	r25, r24
    1e9a:	80 7f       	andi	r24, 0xF0	; 240
    1e9c:	98 27       	eor	r25, r24
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	40 64       	ori	r20, 0x40	; 64
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e2 57       	subi	r30, 0x72	; 114
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	c9 01       	movw	r24, r18
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	82 0f       	add	r24, r18
    1eb6:	93 1f       	adc	r25, r19
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e8 59       	subi	r30, 0x98	; 152
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 1f       	adc	r24, r24
    1eca:	88 27       	eor	r24, r24
    1ecc:	88 1f       	adc	r24, r24
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	82 95       	swap	r24
    1ed4:	92 95       	swap	r25
    1ed6:	90 7f       	andi	r25, 0xF0	; 240
    1ed8:	98 27       	eor	r25, r24
    1eda:	80 7f       	andi	r24, 0xF0	; 240
    1edc:	98 27       	eor	r25, r24
    1ede:	84 2b       	or	r24, r20
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	e3 57       	subi	r30, 0x73	; 115
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 5 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 4 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e2 57       	subi	r30, 0x72	; 114
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	de 01       	movw	r26, r28
    1ef0:	a3 57       	subi	r26, 0x73	; 115
    1ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef4:	80 81       	ld	r24, Z
    1ef6:	6c 91       	ld	r22, X
    1ef8:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e4       	ldi	r26, 0x40	; 64
    1f02:	b0 e4       	ldi	r27, 0x40	; 64
    1f04:	8b 87       	std	Y+11, r24	; 0x0b
    1f06:	9c 87       	std	Y+12, r25	; 0x0c
    1f08:	ad 87       	std	Y+13, r26	; 0x0d
    1f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a ef       	ldi	r20, 0xFA	; 250
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	8f 83       	std	Y+7, r24	; 0x07
    1f26:	98 87       	std	Y+8, r25	; 0x08
    1f28:	a9 87       	std	Y+9, r26	; 0x09
    1f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2e:	78 85       	ldd	r23, Y+8	; 0x08
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_voidInit+0xfce>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_voidInit+0x104c>
	else if (__tmp > 65535)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_voidInit+0x1038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_voidInit+0x102e>
    1f90:	88 ec       	ldi	r24, 0xC8	; 200
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_voidInit+0x101c>
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_voidInit+0x1010>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fba:	78 85       	ldd	r23, Y+8	; 0x08
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_voidInit+0x1058>
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc = 0 ;
	uint8 u8CmdLoc  = 0 ;
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    1fe0:	de 01       	movw	r26, r28
    1fe2:	a2 57       	subi	r26, 0x72	; 114
    1fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e2 57       	subi	r30, 0x72	; 114
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	8c 93       	st	X, r24
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e2 57       	subi	r30, 0x72	; 114
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	11 f4       	brne	.+4      	; 0x2002 <LCD_voidInit+0x1082>
    1ffe:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <LCD_voidInit+0x36>
			_delay_ms(3);
		}
	}
	
	
}
    2002:	c2 57       	subi	r28, 0x72	; 114
    2004:	df 4f       	sbci	r29, 0xFF	; 255
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	de bf       	out	0x3e, r29	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	08 95       	ret

0000201a <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	ac 97       	sbiw	r28, 0x2c	; 44
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	8b a7       	std	Y+43, r24	; 0x2b
    2030:	6c a7       	std	Y+44, r22	; 0x2c
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2032:	8b a5       	ldd	r24, Y+43	; 0x2b
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	c9 01       	movw	r24, r18
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	82 0f       	add	r24, r18
    2040:	93 1f       	adc	r25, r19
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	fc 01       	movw	r30, r24
    204c:	e8 59       	subi	r30, 0x98	; 152
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	81 70       	andi	r24, 0x01	; 1
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	09 f0       	breq	.+2      	; 0x205a <LCD_voidWriteCmd+0x40>
    2058:	77 c0       	rjmp	.+238    	; 0x2148 <LCD_voidWriteCmd+0x12e>
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy );
    205a:	8b a5       	ldd	r24, Y+43	; 0x2b
    205c:	6c a5       	ldd	r22, Y+44	; 0x2c
    205e:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e8       	ldi	r26, 0x80	; 128
    2068:	bf e3       	ldi	r27, 0x3F	; 63
    206a:	8f a3       	std	Y+39, r24	; 0x27
    206c:	98 a7       	std	Y+40, r25	; 0x28
    206e:	a9 a7       	std	Y+41, r26	; 0x29
    2070:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	6f a1       	ldd	r22, Y+39	; 0x27
    2074:	78 a5       	ldd	r23, Y+40	; 0x28
    2076:	89 a5       	ldd	r24, Y+41	; 0x29
    2078:	9a a5       	ldd	r25, Y+42	; 0x2a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4a ef       	ldi	r20, 0xFA	; 250
    2080:	54 e4       	ldi	r21, 0x44	; 68
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	8b a3       	std	Y+35, r24	; 0x23
    208c:	9c a3       	std	Y+36, r25	; 0x24
    208e:	ad a3       	std	Y+37, r26	; 0x25
    2090:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2092:	6b a1       	ldd	r22, Y+35	; 0x23
    2094:	7c a1       	ldd	r23, Y+36	; 0x24
    2096:	8d a1       	ldd	r24, Y+37	; 0x25
    2098:	9e a1       	ldd	r25, Y+38	; 0x26
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <LCD_voidWriteCmd+0x9a>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9a a3       	std	Y+34, r25	; 0x22
    20b0:	89 a3       	std	Y+33, r24	; 0x21
    20b2:	3f c0       	rjmp	.+126    	; 0x2132 <LCD_voidWriteCmd+0x118>
	else if (__tmp > 65535)
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	3f ef       	ldi	r19, 0xFF	; 255
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	57 e4       	ldi	r21, 0x47	; 71
    20c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	4c f5       	brge	.+82     	; 0x211e <LCD_voidWriteCmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	6f a1       	ldd	r22, Y+39	; 0x27
    20ce:	78 a5       	ldd	r23, Y+40	; 0x28
    20d0:	89 a5       	ldd	r24, Y+41	; 0x29
    20d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e2       	ldi	r20, 0x20	; 32
    20da:	51 e4       	ldi	r21, 0x41	; 65
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <LCD_voidWriteCmd+0xfa>
    20f6:	88 ec       	ldi	r24, 0xC8	; 200
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	98 a3       	std	Y+32, r25	; 0x20
    20fc:	8f 8f       	std	Y+31, r24	; 0x1f
    20fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2100:	98 a1       	ldd	r25, Y+32	; 0x20
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_voidWriteCmd+0xe8>
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	89 a1       	ldd	r24, Y+33	; 0x21
    210c:	9a a1       	ldd	r25, Y+34	; 0x22
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <LCD_voidWriteCmd+0xdc>
    211c:	05 c1       	rjmp	.+522    	; 0x2328 <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	6b a1       	ldd	r22, Y+35	; 0x23
    2120:	7c a1       	ldd	r23, Y+36	; 0x24
    2122:	8d a1       	ldd	r24, Y+37	; 0x25
    2124:	9e a1       	ldd	r25, Y+38	; 0x26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9a a3       	std	Y+34, r25	; 0x22
    2130:	89 a3       	std	Y+33, r24	; 0x21
    2132:	89 a1       	ldd	r24, Y+33	; 0x21
    2134:	9a a1       	ldd	r25, Y+34	; 0x22
    2136:	9e 8f       	std	Y+30, r25	; 0x1e
    2138:	8d 8f       	std	Y+29, r24	; 0x1d
    213a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <LCD_voidWriteCmd+0x124>
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
    2146:	f0 c0       	rjmp	.+480    	; 0x2328 <LCD_voidWriteCmd+0x30e>
		_delay_ms(1);
	}
	else
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy);  
    2148:	8b a5       	ldd	r24, Y+43	; 0x2b
    214a:	6c a5       	ldd	r22, Y+44	; 0x2c
    214c:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e8       	ldi	r26, 0x80	; 128
    2156:	bf e3       	ldi	r27, 0x3F	; 63
    2158:	89 8f       	std	Y+25, r24	; 0x19
    215a:	9a 8f       	std	Y+26, r25	; 0x1a
    215c:	ab 8f       	std	Y+27, r26	; 0x1b
    215e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2160:	69 8d       	ldd	r22, Y+25	; 0x19
    2162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	4a ef       	ldi	r20, 0xFA	; 250
    216e:	54 e4       	ldi	r21, 0x44	; 68
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	8d 8b       	std	Y+21, r24	; 0x15
    217a:	9e 8b       	std	Y+22, r25	; 0x16
    217c:	af 8b       	std	Y+23, r26	; 0x17
    217e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2180:	6d 89       	ldd	r22, Y+21	; 0x15
    2182:	7e 89       	ldd	r23, Y+22	; 0x16
    2184:	8f 89       	ldd	r24, Y+23	; 0x17
    2186:	98 8d       	ldd	r25, Y+24	; 0x18
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e8       	ldi	r20, 0x80	; 128
    218e:	5f e3       	ldi	r21, 0x3F	; 63
    2190:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2194:	88 23       	and	r24, r24
    2196:	2c f4       	brge	.+10     	; 0x21a2 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	9c 8b       	std	Y+20, r25	; 0x14
    219e:	8b 8b       	std	Y+19, r24	; 0x13
    21a0:	3f c0       	rjmp	.+126    	; 0x2220 <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	3f ef       	ldi	r19, 0xFF	; 255
    21ae:	4f e7       	ldi	r20, 0x7F	; 127
    21b0:	57 e4       	ldi	r21, 0x47	; 71
    21b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	4c f5       	brge	.+82     	; 0x220c <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ba:	69 8d       	ldd	r22, Y+25	; 0x19
    21bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e2       	ldi	r20, 0x20	; 32
    21c8:	51 e4       	ldi	r21, 0x41	; 65
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
    21e2:	0f c0       	rjmp	.+30     	; 0x2202 <LCD_voidWriteCmd+0x1e8>
    21e4:	88 ec       	ldi	r24, 0xC8	; 200
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9a 8b       	std	Y+18, r25	; 0x12
    21ea:	89 8b       	std	Y+17, r24	; 0x11
    21ec:	89 89       	ldd	r24, Y+17	; 0x11
    21ee:	9a 89       	ldd	r25, Y+18	; 0x12
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_voidWriteCmd+0x1d6>
    21f4:	9a 8b       	std	Y+18, r25	; 0x12
    21f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	8b 89       	ldd	r24, Y+19	; 0x13
    21fa:	9c 89       	ldd	r25, Y+20	; 0x14
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	9c 8b       	std	Y+20, r25	; 0x14
    2200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2202:	8b 89       	ldd	r24, Y+19	; 0x13
    2204:	9c 89       	ldd	r25, Y+20	; 0x14
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	69 f7       	brne	.-38     	; 0x21e4 <LCD_voidWriteCmd+0x1ca>
    220a:	14 c0       	rjmp	.+40     	; 0x2234 <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220c:	6d 89       	ldd	r22, Y+21	; 0x15
    220e:	7e 89       	ldd	r23, Y+22	; 0x16
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	98 8b       	std	Y+16, r25	; 0x10
    2226:	8f 87       	std	Y+15, r24	; 0x0f
    2228:	8f 85       	ldd	r24, Y+15	; 0x0f
    222a:	98 89       	ldd	r25, Y+16	; 0x10
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_voidWriteCmd+0x212>
    2230:	98 8b       	std	Y+16, r25	; 0x10
    2232:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy<<4);
    2234:	8c a5       	ldd	r24, Y+44	; 0x2c
    2236:	98 2f       	mov	r25, r24
    2238:	92 95       	swap	r25
    223a:	90 7f       	andi	r25, 0xF0	; 240
    223c:	8b a5       	ldd	r24, Y+43	; 0x2b
    223e:	69 2f       	mov	r22, r25
    2240:	0e 94 40 13 	call	0x2680	; 0x2680 <voidWriteCmd>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	8b 87       	std	Y+11, r24	; 0x0b
    224e:	9c 87       	std	Y+12, r25	; 0x0c
    2250:	ad 87       	std	Y+13, r26	; 0x0d
    2252:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	6b 85       	ldd	r22, Y+11	; 0x0b
    2256:	7c 85       	ldd	r23, Y+12	; 0x0c
    2258:	8d 85       	ldd	r24, Y+13	; 0x0d
    225a:	9e 85       	ldd	r25, Y+14	; 0x0e
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a ef       	ldi	r20, 0xFA	; 250
    2262:	54 e4       	ldi	r21, 0x44	; 68
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8f 83       	std	Y+7, r24	; 0x07
    226e:	98 87       	std	Y+8, r25	; 0x08
    2270:	a9 87       	std	Y+9, r26	; 0x09
    2272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LCD_voidWriteCmd+0x27c>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LCD_voidWriteCmd+0x2fa>
	else if (__tmp > 65535)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LCD_voidWriteCmd+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LCD_voidWriteCmd+0x2dc>
    22d8:	88 ec       	ldi	r24, 0xC8	; 200
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_voidWriteCmd+0x2ca>
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LCD_voidWriteCmd+0x2be>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_voidWriteCmd+0x306>
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    2328:	ac 96       	adiw	r28, 0x2c	; 44
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <LCD_voidDisplayChar>:

void LCD_voidDisplayChar(uint8 u8LcdIndxCpy , uint8 u8CharCpy)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	ac 97       	sbiw	r28, 0x2c	; 44
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	8b a7       	std	Y+43, r24	; 0x2b
    2350:	6c a7       	std	Y+44, r22	; 0x2c
	// Rs  1
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_HIGH );
    2352:	8b a5       	ldd	r24, Y+43	; 0x2b
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	c9 01       	movw	r24, r18
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	fc 01       	movw	r30, r24
    236c:	e7 59       	subi	r30, 0x97	; 151
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2378:	8b a5       	ldd	r24, Y+43	; 0x2b
    237a:	28 2f       	mov	r18, r24
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	c9 01       	movw	r24, r18
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	82 0f       	add	r24, r18
    2386:	93 1f       	adc	r25, r19
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	88 0f       	add	r24, r24
    238e:	99 1f       	adc	r25, r25
    2390:	fc 01       	movw	r30, r24
    2392:	e8 59       	subi	r30, 0x98	; 152
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	81 70       	andi	r24, 0x01	; 1
    239a:	81 30       	cpi	r24, 0x01	; 1
    239c:	09 f0       	breq	.+2      	; 0x23a0 <LCD_voidDisplayChar+0x66>
    239e:	77 c0       	rjmp	.+238    	; 0x248e <LCD_voidDisplayChar+0x154>
	{
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);
    23a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a2:	6c a5       	ldd	r22, Y+44	; 0x2c
    23a4:	0e 94 63 13 	call	0x26c6	; 0x26c6 <voidLcdHelper>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e8       	ldi	r26, 0x80	; 128
    23ae:	bf e3       	ldi	r27, 0x3F	; 63
    23b0:	8f a3       	std	Y+39, r24	; 0x27
    23b2:	98 a7       	std	Y+40, r25	; 0x28
    23b4:	a9 a7       	std	Y+41, r26	; 0x29
    23b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	6f a1       	ldd	r22, Y+39	; 0x27
    23ba:	78 a5       	ldd	r23, Y+40	; 0x28
    23bc:	89 a5       	ldd	r24, Y+41	; 0x29
    23be:	9a a5       	ldd	r25, Y+42	; 0x2a
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a ef       	ldi	r20, 0xFA	; 250
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8b a3       	std	Y+35, r24	; 0x23
    23d2:	9c a3       	std	Y+36, r25	; 0x24
    23d4:	ad a3       	std	Y+37, r26	; 0x25
    23d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d8:	6b a1       	ldd	r22, Y+35	; 0x23
    23da:	7c a1       	ldd	r23, Y+36	; 0x24
    23dc:	8d a1       	ldd	r24, Y+37	; 0x25
    23de:	9e a1       	ldd	r25, Y+38	; 0x26
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <LCD_voidDisplayChar+0xc0>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9a a3       	std	Y+34, r25	; 0x22
    23f6:	89 a3       	std	Y+33, r24	; 0x21
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <LCD_voidDisplayChar+0x13e>
	else if (__tmp > 65535)
    23fa:	6b a1       	ldd	r22, Y+35	; 0x23
    23fc:	7c a1       	ldd	r23, Y+36	; 0x24
    23fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2400:	9e a1       	ldd	r25, Y+38	; 0x26
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <LCD_voidDisplayChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	6f a1       	ldd	r22, Y+39	; 0x27
    2414:	78 a5       	ldd	r23, Y+40	; 0x28
    2416:	89 a5       	ldd	r24, Y+41	; 0x29
    2418:	9a a5       	ldd	r25, Y+42	; 0x2a
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9a a3       	std	Y+34, r25	; 0x22
    2438:	89 a3       	std	Y+33, r24	; 0x21
    243a:	0f c0       	rjmp	.+30     	; 0x245a <LCD_voidDisplayChar+0x120>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	98 a3       	std	Y+32, r25	; 0x20
    2442:	8f 8f       	std	Y+31, r24	; 0x1f
    2444:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2446:	98 a1       	ldd	r25, Y+32	; 0x20
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_voidDisplayChar+0x10e>
    244c:	98 a3       	std	Y+32, r25	; 0x20
    244e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	9a a1       	ldd	r25, Y+34	; 0x22
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9a a3       	std	Y+34, r25	; 0x22
    2458:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	89 a1       	ldd	r24, Y+33	; 0x21
    245c:	9a a1       	ldd	r25, Y+34	; 0x22
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <LCD_voidDisplayChar+0x102>
    2462:	05 c1       	rjmp	.+522    	; 0x266e <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6b a1       	ldd	r22, Y+35	; 0x23
    2466:	7c a1       	ldd	r23, Y+36	; 0x24
    2468:	8d a1       	ldd	r24, Y+37	; 0x25
    246a:	9e a1       	ldd	r25, Y+38	; 0x26
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9a a3       	std	Y+34, r25	; 0x22
    2476:	89 a3       	std	Y+33, r24	; 0x21
    2478:	89 a1       	ldd	r24, Y+33	; 0x21
    247a:	9a a1       	ldd	r25, Y+34	; 0x22
    247c:	9e 8f       	std	Y+30, r25	; 0x1e
    247e:	8d 8f       	std	Y+29, r24	; 0x1d
    2480:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_voidDisplayChar+0x14a>
    2488:	9e 8f       	std	Y+30, r25	; 0x1e
    248a:	8d 8f       	std	Y+29, r24	; 0x1d
    248c:	f0 c0       	rjmp	.+480    	; 0x266e <LCD_voidDisplayChar+0x334>
		_delay_ms(1);
	}
	else
	{
		
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);  
    248e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2490:	6c a5       	ldd	r22, Y+44	; 0x2c
    2492:	0e 94 63 13 	call	0x26c6	; 0x26c6 <voidLcdHelper>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	89 8f       	std	Y+25, r24	; 0x19
    24a0:	9a 8f       	std	Y+26, r25	; 0x1a
    24a2:	ab 8f       	std	Y+27, r26	; 0x1b
    24a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	69 8d       	ldd	r22, Y+25	; 0x19
    24a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a ef       	ldi	r20, 0xFA	; 250
    24b4:	54 e4       	ldi	r21, 0x44	; 68
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8d 8b       	std	Y+21, r24	; 0x15
    24c0:	9e 8b       	std	Y+22, r25	; 0x16
    24c2:	af 8b       	std	Y+23, r26	; 0x17
    24c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c6:	6d 89       	ldd	r22, Y+21	; 0x15
    24c8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ca:	8f 89       	ldd	r24, Y+23	; 0x17
    24cc:	98 8d       	ldd	r25, Y+24	; 0x18
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <LCD_voidDisplayChar+0x1ae>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9c 8b       	std	Y+20, r25	; 0x14
    24e4:	8b 8b       	std	Y+19, r24	; 0x13
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <LCD_voidDisplayChar+0x22c>
	else if (__tmp > 65535)
    24e8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ea:	7e 89       	ldd	r23, Y+22	; 0x16
    24ec:	8f 89       	ldd	r24, Y+23	; 0x17
    24ee:	98 8d       	ldd	r25, Y+24	; 0x18
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <LCD_voidDisplayChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	69 8d       	ldd	r22, Y+25	; 0x19
    2502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9c 8b       	std	Y+20, r25	; 0x14
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <LCD_voidDisplayChar+0x20e>
    252a:	88 ec       	ldi	r24, 0xC8	; 200
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	9a 8b       	std	Y+18, r25	; 0x12
    2530:	89 8b       	std	Y+17, r24	; 0x11
    2532:	89 89       	ldd	r24, Y+17	; 0x11
    2534:	9a 89       	ldd	r25, Y+18	; 0x12
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_voidDisplayChar+0x1fc>
    253a:	9a 8b       	std	Y+18, r25	; 0x12
    253c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	8b 89       	ldd	r24, Y+19	; 0x13
    2540:	9c 89       	ldd	r25, Y+20	; 0x14
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9c 8b       	std	Y+20, r25	; 0x14
    2546:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	8b 89       	ldd	r24, Y+19	; 0x13
    254a:	9c 89       	ldd	r25, Y+20	; 0x14
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <LCD_voidDisplayChar+0x1f0>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <LCD_voidDisplayChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6d 89       	ldd	r22, Y+21	; 0x15
    2554:	7e 89       	ldd	r23, Y+22	; 0x16
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9c 8b       	std	Y+20, r25	; 0x14
    2564:	8b 8b       	std	Y+19, r24	; 0x13
    2566:	8b 89       	ldd	r24, Y+19	; 0x13
    2568:	9c 89       	ldd	r25, Y+20	; 0x14
    256a:	98 8b       	std	Y+16, r25	; 0x10
    256c:	8f 87       	std	Y+15, r24	; 0x0f
    256e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2570:	98 89       	ldd	r25, Y+16	; 0x10
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_voidDisplayChar+0x238>
    2576:	98 8b       	std	Y+16, r25	; 0x10
    2578:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy<<4);
    257a:	8c a5       	ldd	r24, Y+44	; 0x2c
    257c:	98 2f       	mov	r25, r24
    257e:	92 95       	swap	r25
    2580:	90 7f       	andi	r25, 0xF0	; 240
    2582:	8b a5       	ldd	r24, Y+43	; 0x2b
    2584:	69 2f       	mov	r22, r25
    2586:	0e 94 63 13 	call	0x26c6	; 0x26c6 <voidLcdHelper>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	a0 e8       	ldi	r26, 0x80	; 128
    2590:	bf e3       	ldi	r27, 0x3F	; 63
    2592:	8b 87       	std	Y+11, r24	; 0x0b
    2594:	9c 87       	std	Y+12, r25	; 0x0c
    2596:	ad 87       	std	Y+13, r26	; 0x0d
    2598:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8f 83       	std	Y+7, r24	; 0x07
    25b4:	98 87       	std	Y+8, r25	; 0x08
    25b6:	a9 87       	std	Y+9, r26	; 0x09
    25b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	2c f4       	brge	.+10     	; 0x25dc <LCD_voidDisplayChar+0x2a2>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	3f c0       	rjmp	.+126    	; 0x265a <LCD_voidDisplayChar+0x320>
	else if (__tmp > 65535)
    25dc:	6f 81       	ldd	r22, Y+7	; 0x07
    25de:	78 85       	ldd	r23, Y+8	; 0x08
    25e0:	89 85       	ldd	r24, Y+9	; 0x09
    25e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	57 e4       	ldi	r21, 0x47	; 71
    25ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	4c f5       	brge	.+82     	; 0x2646 <LCD_voidDisplayChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	0f c0       	rjmp	.+30     	; 0x263c <LCD_voidDisplayChar+0x302>
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_voidDisplayChar+0x2f0>
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <LCD_voidDisplayChar+0x2e4>
    2644:	14 c0       	rjmp	.+40     	; 0x266e <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	6f 81       	ldd	r22, Y+7	; 0x07
    2648:	78 85       	ldd	r23, Y+8	; 0x08
    264a:	89 85       	ldd	r24, Y+9	; 0x09
    264c:	9a 85       	ldd	r25, Y+10	; 0x0a
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9e 83       	std	Y+6, r25	; 0x06
    2658:	8d 83       	std	Y+5, r24	; 0x05
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	9e 81       	ldd	r25, Y+6	; 0x06
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_voidDisplayChar+0x32c>
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    266e:	ac 96       	adiw	r28, 0x2c	; 44
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <voidWriteCmd>:

static void voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <voidWriteCmd+0x6>
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	6a 83       	std	Y+2, r22	; 0x02
    // Rs  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_LOW );
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	c9 01       	movw	r24, r18
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	82 0f       	add	r24, r18
    269c:	93 1f       	adc	r25, r19
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	fc 01       	movw	r30, r24
    26a8:	e7 59       	subi	r30, 0x97	; 151
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	voidLcdHelper( u8LcdIndxCpy, u8CmdCpy);
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	6a 81       	ldd	r22, Y+2	; 0x02
    26b8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <voidLcdHelper>
	

}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <voidLcdHelper>:

static void voidLcdHelper(uint8 u8LcdIndxCpy , uint8 u8CmdDataCpy)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	6f 97       	sbiw	r28, 0x1f	; 31
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	8e 8f       	std	Y+30, r24	; 0x1e
    26dc:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc ;
	// RW  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rw , DIO_LOW );
    26de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26e0:	28 2f       	mov	r18, r24
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	c9 01       	movw	r24, r18
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	82 0f       	add	r24, r18
    26ec:	93 1f       	adc	r25, r19
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	01 96       	adiw	r24, 0x01	; 1
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	fc 01       	movw	r30, r24
    26fa:	e8 59       	subi	r30, 0x98	; 152
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	//latch start
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_HIGH );
    2706:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	c9 01       	movw	r24, r18
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	82 0f       	add	r24, r18
    2714:	93 1f       	adc	r25, r19
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	fc 01       	movw	r30, r24
    2720:	e5 59       	subi	r30, 0x95	; 149
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	80 81       	ld	r24, Z
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    272c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	c9 01       	movw	r24, r18
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	82 0f       	add	r24, r18
    273a:	93 1f       	adc	r25, r19
    273c:	88 0f       	add	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	fc 01       	movw	r30, r24
    2746:	e8 59       	subi	r30, 0x98	; 152
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 81       	ld	r24, Z
    274c:	81 70       	andi	r24, 0x01	; 1
    274e:	81 30       	cpi	r24, 0x01	; 1
    2750:	89 f5       	brne	.+98     	; 0x27b4 <voidLcdHelper+0xee>
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    2752:	1d 8e       	std	Y+29, r1	; 0x1d
    2754:	2b c0       	rjmp	.+86     	; 0x27ac <voidLcdHelper+0xe6>
		{                   /* Rakm elselka                                                          cmd or data  */
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    2756:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2758:	28 2f       	mov	r18, r24
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275e:	48 2f       	mov	r20, r24
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	c9 01       	movw	r24, r18
    2764:	88 0f       	add	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	82 0f       	add	r24, r18
    276a:	93 1f       	adc	r25, r19
    276c:	88 0f       	add	r24, r24
    276e:	99 1f       	adc	r25, r25
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	84 0f       	add	r24, r20
    2776:	95 1f       	adc	r25, r21
    2778:	fc 01       	movw	r30, r24
    277a:	e4 59       	subi	r30, 0x94	; 148
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	40 81       	ld	r20, Z
    2780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	b9 01       	movw	r22, r18
    278e:	02 c0       	rjmp	.+4      	; 0x2794 <voidLcdHelper+0xce>
    2790:	75 95       	asr	r23
    2792:	67 95       	ror	r22
    2794:	8a 95       	dec	r24
    2796:	e2 f7       	brpl	.-8      	; 0x2790 <voidLcdHelper+0xca>
    2798:	cb 01       	movw	r24, r22
    279a:	98 2f       	mov	r25, r24
    279c:	91 70       	andi	r25, 0x01	; 1
    279e:	84 2f       	mov	r24, r20
    27a0:	69 2f       	mov	r22, r25
    27a2:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    27a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	8d 8f       	std	Y+29, r24	; 0x1d
    27ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ae:	88 30       	cpi	r24, 0x08	; 8
    27b0:	90 f2       	brcs	.-92     	; 0x2756 <voidLcdHelper+0x90>
    27b2:	31 c0       	rjmp	.+98     	; 0x2816 <voidLcdHelper+0x150>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    27b4:	84 e0       	ldi	r24, 0x04	; 4
    27b6:	8d 8f       	std	Y+29, r24	; 0x1d
    27b8:	2b c0       	rjmp	.+86     	; 0x2810 <voidLcdHelper+0x14a>
		{
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    27ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c2:	48 2f       	mov	r20, r24
    27c4:	50 e0       	ldi	r21, 0x00	; 0
    27c6:	c9 01       	movw	r24, r18
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	84 0f       	add	r24, r20
    27da:	95 1f       	adc	r25, r21
    27dc:	fc 01       	movw	r30, r24
    27de:	e4 59       	subi	r30, 0x94	; 148
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	40 81       	ld	r20, Z
    27e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	b9 01       	movw	r22, r18
    27f2:	02 c0       	rjmp	.+4      	; 0x27f8 <voidLcdHelper+0x132>
    27f4:	75 95       	asr	r23
    27f6:	67 95       	ror	r22
    27f8:	8a 95       	dec	r24
    27fa:	e2 f7       	brpl	.-8      	; 0x27f4 <voidLcdHelper+0x12e>
    27fc:	cb 01       	movw	r24, r22
    27fe:	98 2f       	mov	r25, r24
    2800:	91 70       	andi	r25, 0x01	; 1
    2802:	84 2f       	mov	r24, r20
    2804:	69 2f       	mov	r22, r25
    2806:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	8d 8f       	std	Y+29, r24	; 0x1d
    2810:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2812:	88 30       	cpi	r24, 0x08	; 8
    2814:	90 f2       	brcs	.-92     	; 0x27ba <voidLcdHelper+0xf4>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 e2       	ldi	r26, 0x20	; 32
    281c:	b1 e4       	ldi	r27, 0x41	; 65
    281e:	89 8f       	std	Y+25, r24	; 0x19
    2820:	9a 8f       	std	Y+26, r25	; 0x1a
    2822:	ab 8f       	std	Y+27, r26	; 0x1b
    2824:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	69 8d       	ldd	r22, Y+25	; 0x19
    2828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a ef       	ldi	r20, 0xFA	; 250
    2834:	54 e4       	ldi	r21, 0x44	; 68
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8d 8b       	std	Y+21, r24	; 0x15
    2840:	9e 8b       	std	Y+22, r25	; 0x16
    2842:	af 8b       	std	Y+23, r26	; 0x17
    2844:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2846:	6d 89       	ldd	r22, Y+21	; 0x15
    2848:	7e 89       	ldd	r23, Y+22	; 0x16
    284a:	8f 89       	ldd	r24, Y+23	; 0x17
    284c:	98 8d       	ldd	r25, Y+24	; 0x18
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <voidLcdHelper+0x1a2>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9c 8b       	std	Y+20, r25	; 0x14
    2864:	8b 8b       	std	Y+19, r24	; 0x13
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <voidLcdHelper+0x220>
	else if (__tmp > 65535)
    2868:	6d 89       	ldd	r22, Y+21	; 0x15
    286a:	7e 89       	ldd	r23, Y+22	; 0x16
    286c:	8f 89       	ldd	r24, Y+23	; 0x17
    286e:	98 8d       	ldd	r25, Y+24	; 0x18
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <voidLcdHelper+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	69 8d       	ldd	r22, Y+25	; 0x19
    2882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9c 8b       	std	Y+20, r25	; 0x14
    28a6:	8b 8b       	std	Y+19, r24	; 0x13
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <voidLcdHelper+0x202>
    28aa:	88 ec       	ldi	r24, 0xC8	; 200
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9a 8b       	std	Y+18, r25	; 0x12
    28b0:	89 8b       	std	Y+17, r24	; 0x11
    28b2:	89 89       	ldd	r24, Y+17	; 0x11
    28b4:	9a 89       	ldd	r25, Y+18	; 0x12
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <voidLcdHelper+0x1f0>
    28ba:	9a 8b       	std	Y+18, r25	; 0x12
    28bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	9c 8b       	std	Y+20, r25	; 0x14
    28c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ca:	9c 89       	ldd	r25, Y+20	; 0x14
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <voidLcdHelper+0x1e4>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <voidLcdHelper+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	6d 89       	ldd	r22, Y+21	; 0x15
    28d4:	7e 89       	ldd	r23, Y+22	; 0x16
    28d6:	8f 89       	ldd	r24, Y+23	; 0x17
    28d8:	98 8d       	ldd	r25, Y+24	; 0x18
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	8b 8b       	std	Y+19, r24	; 0x13
    28e6:	8b 89       	ldd	r24, Y+19	; 0x13
    28e8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ea:	98 8b       	std	Y+16, r25	; 0x10
    28ec:	8f 87       	std	Y+15, r24	; 0x0f
    28ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f0:	98 89       	ldd	r25, Y+16	; 0x10
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <voidLcdHelper+0x22c>
    28f6:	98 8b       	std	Y+16, r25	; 0x10
    28f8:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}
	
	//latch
	_delay_ms(10);
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_LOW );
    28fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	c9 01       	movw	r24, r18
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	82 0f       	add	r24, r18
    2908:	93 1f       	adc	r25, r19
    290a:	88 0f       	add	r24, r24
    290c:	99 1f       	adc	r25, r25
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	fc 01       	movw	r30, r24
    2914:	e5 59       	subi	r30, 0x95	; 149
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	a0 e2       	ldi	r26, 0x20	; 32
    2926:	b1 e4       	ldi	r27, 0x41	; 65
    2928:	8b 87       	std	Y+11, r24	; 0x0b
    292a:	9c 87       	std	Y+12, r25	; 0x0c
    292c:	ad 87       	std	Y+13, r26	; 0x0d
    292e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	6b 85       	ldd	r22, Y+11	; 0x0b
    2932:	7c 85       	ldd	r23, Y+12	; 0x0c
    2934:	8d 85       	ldd	r24, Y+13	; 0x0d
    2936:	9e 85       	ldd	r25, Y+14	; 0x0e
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a ef       	ldi	r20, 0xFA	; 250
    293e:	54 e4       	ldi	r21, 0x44	; 68
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	8f 83       	std	Y+7, r24	; 0x07
    294a:	98 87       	std	Y+8, r25	; 0x08
    294c:	a9 87       	std	Y+9, r26	; 0x09
    294e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2950:	6f 81       	ldd	r22, Y+7	; 0x07
    2952:	78 85       	ldd	r23, Y+8	; 0x08
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	9a 85       	ldd	r25, Y+10	; 0x0a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <voidLcdHelper+0x2ac>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <voidLcdHelper+0x32a>
	else if (__tmp > 65535)
    2972:	6f 81       	ldd	r22, Y+7	; 0x07
    2974:	78 85       	ldd	r23, Y+8	; 0x08
    2976:	89 85       	ldd	r24, Y+9	; 0x09
    2978:	9a 85       	ldd	r25, Y+10	; 0x0a
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <voidLcdHelper+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6b 85       	ldd	r22, Y+11	; 0x0b
    298c:	7c 85       	ldd	r23, Y+12	; 0x0c
    298e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2990:	9e 85       	ldd	r25, Y+14	; 0x0e
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9e 83       	std	Y+6, r25	; 0x06
    29b0:	8d 83       	std	Y+5, r24	; 0x05
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <voidLcdHelper+0x30c>
    29b4:	88 ec       	ldi	r24, 0xC8	; 200
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9c 83       	std	Y+4, r25	; 0x04
    29ba:	8b 83       	std	Y+3, r24	; 0x03
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	9c 81       	ldd	r25, Y+4	; 0x04
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <voidLcdHelper+0x2fa>
    29c4:	9c 83       	std	Y+4, r25	; 0x04
    29c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	9e 81       	ldd	r25, Y+6	; 0x06
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <voidLcdHelper+0x2ee>
    29da:	14 c0       	rjmp	.+40     	; 0x2a04 <voidLcdHelper+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9e 83       	std	Y+6, r25	; 0x06
    29ee:	8d 83       	std	Y+5, r24	; 0x05
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <voidLcdHelper+0x336>
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    2a04:	6f 96       	adiw	r28, 0x1f	; 31
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <USART_voidInit>:
pf    USART_pfCallTxComp;
uint16 USART_u16ReceivedValue = 0 ;
uint16 USART_u16TransmitValue = 0 ;

void USART_voidInit(void) 
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <USART_voidInit+0x6>
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
uint8 u8TempBLoc = 0b00011000 ;  /* Enabel TX and RX by set bit 3 and 4*/
    2a20:	88 e1       	ldi	r24, 0x18	; 24
    2a22:	8a 83       	std	Y+2, r24	; 0x02
uint8 u8TempCLoc = 0b10000000 ;  /* Set the URSEL bit number 7 by 1 to configure read or write from UCSRC */
    2a24:	80 e8       	ldi	r24, 0x80	; 128
    2a26:	89 83       	std	Y+1, r24	; 0x01
#elif USART_FRAME_DATA_SIZE ==     USART_DATA_SIZE_7 
CLR_BIT(u8TempCLoc,1);
SET_BIT(u8TempCLoc,2);
CLR_BIT(u8TempBLoc,2);
#elif USART_FRAME_DATA_SIZE ==     USART_DATA_SIZE_8 
SET_BIT(u8TempCLoc,1);
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	82 60       	ori	r24, 0x02	; 2
    2a2c:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(u8TempCLoc,2);
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	84 60       	ori	r24, 0x04	; 4
    2a32:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(u8TempBLoc,2);
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	8b 7f       	andi	r24, 0xFB	; 251
    2a38:	8a 83       	std	Y+2, r24	; 0x02
SET_BIT(u8TempCLoc,2);
SET_BIT(u8TempBLoc,2);
#endif
/* select if sync or async */
#if USART_MODE  ==   USART_ASYNC
CLR_BIT(u8TempCLoc,6);
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	8f 7b       	andi	r24, 0xBF	; 191
    2a3e:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(u8TempCLoc,6);	
#endif

/*configure the stope bits in frame (2 or 1) */
#if USART_STOP_BITS_SIZE == USART_ONE_STOP 
CLR_BIT(u8TempCLoc,3);	
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	87 7f       	andi	r24, 0xF7	; 247
    2a44:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(u8TempCLoc,3);	
#endif	


#if USART_PARITY_TYPE == USART_EVEN_PARITY
CLR_BIT(u8TempCLoc,4);	
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	8f 7e       	andi	r24, 0xEF	; 239
    2a4a:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(u8TempCLoc,5);	
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	80 62       	ori	r24, 0x20	; 32
    2a50:	89 83       	std	Y+1, r24	; 0x01
CLR_BIT(u8TempCLoc,4);	
CLR_BIT(u8TempCLoc,5);	
#endif
/* configere send data at rising or falling with respect to clock*/
#if USART_CLK_POLARITY ==  USART_SETUP_RISING
CLR_BIT(u8TempCLoc,0);	
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	8e 7f       	andi	r24, 0xFE	; 254
    2a56:	89 83       	std	Y+1, r24	; 0x01
SET_BIT(u8TempCLoc,0);	
#endif
/* load in UBBRH and UBBRL with 51 to operate at baud rate 9600*/
/*USART_SPEED is a macros which is congigured in congif file to be 51 */ 

UBBRH = ((USART_SPEED>>8)&0x0F) ; /*make bit 0,1,2,3 in  UBBRH reg with ones to store in UBBRH last four bits in USART_SPEED  */
    2a58:	e0 e4       	ldi	r30, 0x40	; 64
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	10 82       	st	Z, r1
UBBRL = (uint8)USART_SPEED ;      /*stor in UBBRL reg first 8 bits in USART_SPEED*/
    2a5e:	e9 e2       	ldi	r30, 0x29	; 41
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	83 e3       	ldi	r24, 0x33	; 51
    2a64:	80 83       	st	Z, r24
UCSRB = u8TempBLoc ;
    2a66:	ea e2       	ldi	r30, 0x2A	; 42
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	80 83       	st	Z, r24
UCSRC = u8TempCLoc ;	
    2a6e:	e0 e4       	ldi	r30, 0x40	; 64
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	80 83       	st	Z, r24
	
}
    2a76:	0f 90       	pop	r0
    2a78:	0f 90       	pop	r0
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	08 95       	ret

00002a80 <USART_voidSend>:

void USART_voidSend(uint16 u16Data ) 
{
    2a80:	df 93       	push	r29
    2a82:	cf 93       	push	r28
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <USART_voidSend+0x6>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
	
	while (GET_BIT(UCSRA , 5)!= 1);  /* pooling on the flag bit to make sure that UDR reg is ready and to recieve new data*/
    2a8e:	eb e2       	ldi	r30, 0x2B	; 43
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	82 95       	swap	r24
    2a96:	86 95       	lsr	r24
    2a98:	87 70       	andi	r24, 0x07	; 7
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	81 70       	andi	r24, 0x01	; 1
    2aa0:	90 70       	andi	r25, 0x00	; 0
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	a1 f3       	breq	.-24     	; 0x2a8e <USART_voidSend+0xe>
		{
		   SET_BIT(UCSRB,0);  /* if bit 8 in data is 1 then store zero in bit 1 in USCRB reg */
		}	
	#endif
	/* store first 8 bits from data in UDR reg */
	UDR = u16Data ;
    2aa6:	ec e2       	ldi	r30, 0x2C	; 44
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	89 81       	ldd	r24, Y+1	; 0x01
    2aac:	80 83       	st	Z, r24
    
	
}
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <USART_enuReceive>:

tenuErrorStatus USART_enuReceive(uint16 *pu16Data) 
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <USART_enuReceive+0x6>
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <USART_enuReceive+0x8>
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <USART_enuReceive+0xa>
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
	tenuErrorStatus enuReturnLoc =EOK ;
    2aca:	1c 82       	std	Y+4, r1	; 0x04
	uint8 u8StatusLoc = 0;
    2acc:	1b 82       	std	Y+3, r1	; 0x03
	uint8 u8NineBitLoc = 0 ;
    2ace:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8DataLoc = 0;
    2ad0:	19 82       	std	Y+1, r1	; 0x01
	while (GET_BIT(UCSRA , 7 ) ==0);  /* pooling on the flag bit to make sure that UDR reg recieved the data*/
    2ad2:	eb e2       	ldi	r30, 0x2B	; 43
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	88 23       	and	r24, r24
    2ada:	dc f7       	brge	.-10     	; 0x2ad2 <USART_enuReceive+0x1a>
	u8StatusLoc = UCSRA&0b00011100; /* check if ther are errors (frame ,parity,data over run errors*/
    2adc:	eb e2       	ldi	r30, 0x2B	; 43
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8c 71       	andi	r24, 0x1C	; 28
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
	u8NineBitLoc = GET_BIT(UCSRB,1); /* store bit number 8 */
    2ae6:	ea e2       	ldi	r30, 0x2A	; 42
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	86 95       	lsr	r24
    2aee:	81 70       	andi	r24, 0x01	; 1
    2af0:	8a 83       	std	Y+2, r24	; 0x02
	u8DataLoc = UDR ;                /* store first 8 bits from UDR */
    2af2:	ec e2       	ldi	r30, 0x2C	; 44
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	89 83       	std	Y+1, r24	; 0x01
	if (u8StatusLoc!=0)
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	88 23       	and	r24, r24
    2afe:	19 f0       	breq	.+6      	; 0x2b06 <USART_enuReceive+0x4e>
	{
		enuReturnLoc = ENOK ;
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	8c 83       	std	Y+4, r24	; 0x04
    2b04:	07 c0       	rjmp	.+14     	; 0x2b14 <USART_enuReceive+0x5c>
	else 
	{
		#if USART_FRAME_DATA_SIZE ==     USART_DATA_SIZE_9
		*pu16Data = u8NineBitLoc<<8 | u8DataLoc ;
		#else 
		*pu16Data =  u8DataLoc ;
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	ed 81       	ldd	r30, Y+5	; 0x05
    2b0e:	fe 81       	ldd	r31, Y+6	; 0x06
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
		#endif
	}
	return enuReturnLoc ;
    2b14:	8c 81       	ldd	r24, Y+4	; 0x04
	
}
    2b16:	26 96       	adiw	r28, 0x06	; 6
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <USART_voidSendAsync>:


void USART_voidSendAsync(uint16 u16Data )
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <USART_voidSendAsync+0x6>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
	USART_u16TransmitValue = u16Data ;
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3a:	90 93 77 00 	sts	0x0077, r25
    2b3e:	80 93 76 00 	sts	0x0076, r24
}
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	cf 91       	pop	r28
    2b48:	df 91       	pop	r29
    2b4a:	08 95       	ret

00002b4c <USART_enuReceiveAsync>:

tenuErrorStatus USART_enuReceiveAsync(uint16 *pu16Data)
{
    2b4c:	df 93       	push	r29
    2b4e:	cf 93       	push	r28
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <USART_enuReceiveAsync+0x6>
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	9b 83       	std	Y+3, r25	; 0x03
    2b5a:	8a 83       	std	Y+2, r24	; 0x02
	tenuErrorStatus enuReturnLoc =EOK ;
    2b5c:	19 82       	std	Y+1, r1	; 0x01
	if (GET_BIT(USART_u16ReceivedValue , 15)!=0)
    2b5e:	80 91 74 00 	lds	r24, 0x0074
    2b62:	90 91 75 00 	lds	r25, 0x0075
    2b66:	99 23       	and	r25, r25
    2b68:	1c f4       	brge	.+6      	; 0x2b70 <USART_enuReceiveAsync+0x24>
	{
		enuReturnLoc = ENOK ;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	08 c0       	rjmp	.+16     	; 0x2b80 <USART_enuReceiveAsync+0x34>
	}
	else 
	{
		*pu16Data = USART_u16ReceivedValue ;
    2b70:	80 91 74 00 	lds	r24, 0x0074
    2b74:	90 91 75 00 	lds	r25, 0x0075
    2b78:	ea 81       	ldd	r30, Y+2	; 0x02
    2b7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	80 83       	st	Z, r24
	}
	return enuReturnLoc ;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <USART_voidEnableIntRxComp>:

void USART_voidEnableIntRxComp(void)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,7);
    2b96:	aa e2       	ldi	r26, 0x2A	; 42
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	ea e2       	ldi	r30, 0x2A	; 42
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 68       	ori	r24, 0x80	; 128
    2ba2:	8c 93       	st	X, r24
}
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <USART_voidDisableIntRxComp>:
void USART_voidDisableIntRxComp(void)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,7);	
    2bb2:	aa e2       	ldi	r26, 0x2A	; 42
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	ea e2       	ldi	r30, 0x2A	; 42
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	8f 77       	andi	r24, 0x7F	; 127
    2bbe:	8c 93       	st	X, r24
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <USART_voidEnableIntTxComp>:
void USART_voidEnableIntTxComp(void)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,6);	
    2bce:	aa e2       	ldi	r26, 0x2A	; 42
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ea e2       	ldi	r30, 0x2A	; 42
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	80 64       	ori	r24, 0x40	; 64
    2bda:	8c 93       	st	X, r24
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <USART_voidDisableIntTxComp>:
void USART_voidDisableIntTxComp(void)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,6);	
    2bea:	aa e2       	ldi	r26, 0x2A	; 42
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	ea e2       	ldi	r30, 0x2A	; 42
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	8f 7b       	andi	r24, 0xBF	; 191
    2bf6:	8c 93       	st	X, r24
}
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <USART_voidEnableIntTxEmpty>:
void USART_voidEnableIntTxEmpty(void)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,5);
    2c06:	aa e2       	ldi	r26, 0x2A	; 42
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	ea e2       	ldi	r30, 0x2A	; 42
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	80 62       	ori	r24, 0x20	; 32
    2c12:	8c 93       	st	X, r24
}
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <USART_voidDisableIntTxEmpty>:
void USART_voidDisableIntTxEmpty(void)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,5);
    2c22:	aa e2       	ldi	r26, 0x2A	; 42
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	ea e2       	ldi	r30, 0x2A	; 42
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	8f 7d       	andi	r24, 0xDF	; 223
    2c2e:	8c 93       	st	X, r24
}
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <__vector_13>:


/*Rx Complete ISR */
void __vector_13 (void) __attribute__ ((signal,used));
void __vector_13 (void)
{
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	8f 93       	push	r24
    2c42:	9f 93       	push	r25
    2c44:	ef 93       	push	r30
    2c46:	ff 93       	push	r31
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <__vector_13+0x18>
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <__vector_13+0x1a>
    2c50:	0f 92       	push	r0
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
	uint16 u16ResLoc = 0 ;
    2c56:	1d 82       	std	Y+5, r1	; 0x05
    2c58:	1c 82       	std	Y+4, r1	; 0x04
	uint8 u8StatusLoc = UCSRA&0b00011100;
    2c5a:	eb e2       	ldi	r30, 0x2B	; 43
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	8c 71       	andi	r24, 0x1C	; 28
    2c62:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8NineBitLoc = GET_BIT(UCSRB,1);
    2c64:	ea e2       	ldi	r30, 0x2A	; 42
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	86 95       	lsr	r24
    2c6c:	81 70       	andi	r24, 0x01	; 1
    2c6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8DataLoc = UDR ;
    2c70:	ec e2       	ldi	r30, 0x2C	; 44
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	89 83       	std	Y+1, r24	; 0x01
	if (u8StatusLoc!=0)
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	88 23       	and	r24, r24
    2c7c:	31 f0       	breq	.+12     	; 0x2c8a <__vector_13+0x54>
	{
		SET_BIT(u16ResLoc,15);
    2c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c80:	9d 81       	ldd	r25, Y+5	; 0x05
    2c82:	90 68       	ori	r25, 0x80	; 128
    2c84:	9d 83       	std	Y+5, r25	; 0x05
    2c86:	8c 83       	std	Y+4, r24	; 0x04
    2c88:	05 c0       	rjmp	.+10     	; 0x2c94 <__vector_13+0x5e>
	else 
	{
		#if USART_FRAME_DATA_SIZE ==     USART_DATA_SIZE_9
		u16ResLoc = u8NineBitLoc<<8 | u8DataLoc ;
		#else 
		u16ResLoc =  u8DataLoc ;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	88 2f       	mov	r24, r24
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9d 83       	std	Y+5, r25	; 0x05
    2c92:	8c 83       	std	Y+4, r24	; 0x04
		#endif
	}
	USART_u16ReceivedValue = u16ResLoc ;
    2c94:	8c 81       	ldd	r24, Y+4	; 0x04
    2c96:	9d 81       	ldd	r25, Y+5	; 0x05
    2c98:	90 93 75 00 	sts	0x0075, r25
    2c9c:	80 93 74 00 	sts	0x0074, r24
	
}
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	ff 91       	pop	r31
    2cb0:	ef 91       	pop	r30
    2cb2:	9f 91       	pop	r25
    2cb4:	8f 91       	pop	r24
    2cb6:	0f 90       	pop	r0
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	0f 90       	pop	r0
    2cbc:	1f 90       	pop	r1
    2cbe:	18 95       	reti

00002cc0 <USART_voidSetCallBackTxComp>:

void USART_voidSetCallBackTxComp(pf pfCallCpy)
{
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <USART_voidSetCallBackTxComp+0x6>
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	USART_pfCallTxComp = pfCallCpy ;
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	90 93 79 00 	sts	0x0079, r25
    2cd6:	80 93 78 00 	sts	0x0078, r24
}
    2cda:	0f 90       	pop	r0
    2cdc:	0f 90       	pop	r0
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <__vector_15>:

void __vector_15 (void) __attribute__ ((signal,used));
void __vector_15 (void)
{
    2ce4:	1f 92       	push	r1
    2ce6:	0f 92       	push	r0
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	0f 92       	push	r0
    2cec:	11 24       	eor	r1, r1
    2cee:	2f 93       	push	r18
    2cf0:	3f 93       	push	r19
    2cf2:	4f 93       	push	r20
    2cf4:	5f 93       	push	r21
    2cf6:	6f 93       	push	r22
    2cf8:	7f 93       	push	r23
    2cfa:	8f 93       	push	r24
    2cfc:	9f 93       	push	r25
    2cfe:	af 93       	push	r26
    2d00:	bf 93       	push	r27
    2d02:	ef 93       	push	r30
    2d04:	ff 93       	push	r31
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	USART_pfCallTxComp();
    2d0e:	e0 91 78 00 	lds	r30, 0x0078
    2d12:	f0 91 79 00 	lds	r31, 0x0079
    2d16:	09 95       	icall
}
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	ff 91       	pop	r31
    2d1e:	ef 91       	pop	r30
    2d20:	bf 91       	pop	r27
    2d22:	af 91       	pop	r26
    2d24:	9f 91       	pop	r25
    2d26:	8f 91       	pop	r24
    2d28:	7f 91       	pop	r23
    2d2a:	6f 91       	pop	r22
    2d2c:	5f 91       	pop	r21
    2d2e:	4f 91       	pop	r20
    2d30:	3f 91       	pop	r19
    2d32:	2f 91       	pop	r18
    2d34:	0f 90       	pop	r0
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	0f 90       	pop	r0
    2d3a:	1f 90       	pop	r1
    2d3c:	18 95       	reti

00002d3e <__vector_14>:

void __vector_14 (void) __attribute__ ((signal,used));
void __vector_14 (void)
{
    2d3e:	1f 92       	push	r1
    2d40:	0f 92       	push	r0
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	0f 92       	push	r0
    2d46:	11 24       	eor	r1, r1
    2d48:	8f 93       	push	r24
    2d4a:	9f 93       	push	r25
    2d4c:	ef 93       	push	r30
    2d4e:	ff 93       	push	r31
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <__vector_14+0x18>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
	uint16 u16Data = USART_u16TransmitValue;
    2d5a:	80 91 76 00 	lds	r24, 0x0076
    2d5e:	90 91 77 00 	lds	r25, 0x0077
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	89 83       	std	Y+1, r24	; 0x01
		else
		{
		   SET_BIT(UCSRB,0);
		}	
	#endif
	UDR = u16Data ;
    2d66:	ec e2       	ldi	r30, 0x2C	; 44
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	80 83       	st	Z, r24
	
}
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	cf 91       	pop	r28
    2d74:	df 91       	pop	r29
    2d76:	ff 91       	pop	r31
    2d78:	ef 91       	pop	r30
    2d7a:	9f 91       	pop	r25
    2d7c:	8f 91       	pop	r24
    2d7e:	0f 90       	pop	r0
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	0f 90       	pop	r0
    2d84:	1f 90       	pop	r1
    2d86:	18 95       	reti

00002d88 <main>:
#include "LCD.h"
#include "USART.h"
#include "util/delay.h"

void main (void)
{
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	60 97       	sbiw	r28, 0x10	; 16
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
	uint16 u16DataLoc;
	//uint8 u8CountLoc=0;
	DIO_voidInit();
    2d9c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	LCD_voidInit();
    2da0:	0e 94 c0 07 	call	0xf80	; 0xf80 <LCD_voidInit>
	USART_voidInit();
    2da4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <USART_voidInit>
	LCD_voidWriteCmd(0 , 0x80);
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	60 e8       	ldi	r22, 0x80	; 128
    2dac:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_voidWriteCmd>

	while(1)
	{
		USART_enuReceive(&u16DataLoc);
    2db0:	ce 01       	movw	r24, r28
    2db2:	0f 96       	adiw	r24, 0x0f	; 15
    2db4:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <USART_enuReceive>
		LCD_voidDisplayChar(0,'T');
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	64 e5       	ldi	r22, 0x54	; 84
    2dbc:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,'E');
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	65 e4       	ldi	r22, 0x45	; 69
    2dc4:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,'M');
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	6d e4       	ldi	r22, 0x4D	; 77
    2dcc:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,'P');
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	60 e5       	ldi	r22, 0x50	; 80
    2dd4:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,'=');
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	6d e3       	ldi	r22, 0x3D	; 61
    2ddc:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,' ');
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	60 e2       	ldi	r22, 0x20	; 32
    2de4:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>




		LCD_voidDisplayChar(0,(u16DataLoc/100) +0x30);
    2de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dea:	98 89       	ldd	r25, Y+16	; 0x10
    2dec:	24 e6       	ldi	r18, 0x64	; 100
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	b9 01       	movw	r22, r18
    2df2:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__udivmodhi4>
    2df6:	cb 01       	movw	r24, r22
    2df8:	98 2f       	mov	r25, r24
    2dfa:	90 5d       	subi	r25, 0xD0	; 208
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	69 2f       	mov	r22, r25
    2e00:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,((u16DataLoc%100)/10) +0x30);
    2e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e06:	98 89       	ldd	r25, Y+16	; 0x10
    2e08:	24 e6       	ldi	r18, 0x64	; 100
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	b9 01       	movw	r22, r18
    2e0e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__udivmodhi4>
    2e12:	2a e0       	ldi	r18, 0x0A	; 10
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	b9 01       	movw	r22, r18
    2e18:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__udivmodhi4>
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	98 2f       	mov	r25, r24
    2e20:	90 5d       	subi	r25, 0xD0	; 208
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	69 2f       	mov	r22, r25
    2e26:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
		LCD_voidDisplayChar(0,(u16DataLoc%10)+0x30);
    2e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e2c:	98 89       	ldd	r25, Y+16	; 0x10
    2e2e:	2a e0       	ldi	r18, 0x0A	; 10
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	b9 01       	movw	r22, r18
    2e34:	0e 94 99 17 	call	0x2f32	; 0x2f32 <__udivmodhi4>
    2e38:	98 2f       	mov	r25, r24
    2e3a:	90 5d       	subi	r25, 0xD0	; 208
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	69 2f       	mov	r22, r25
    2e40:	0e 94 9d 11 	call	0x233a	; 0x233a <LCD_voidDisplayChar>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a8 e4       	ldi	r26, 0x48	; 72
    2e4a:	b3 e4       	ldi	r27, 0x43	; 67
    2e4c:	8b 87       	std	Y+11, r24	; 0x0b
    2e4e:	9c 87       	std	Y+12, r25	; 0x0c
    2e50:	ad 87       	std	Y+13, r26	; 0x0d
    2e52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	4a ef       	ldi	r20, 0xFA	; 250
    2e62:	54 e4       	ldi	r21, 0x44	; 68
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    2e70:	a9 87       	std	Y+9, r26	; 0x09
    2e72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	2c f4       	brge	.+10     	; 0x2e96 <main+0x10e>
		__ticks = 1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
    2e94:	3f c0       	rjmp	.+126    	; 0x2f14 <main+0x18c>
	else if (__tmp > 65535)
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eaa:	18 16       	cp	r1, r24
    2eac:	4c f5       	brge	.+82     	; 0x2f00 <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <main+0x16e>
    2ed8:	88 ec       	ldi	r24, 0xC8	; 200
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9c 83       	std	Y+4, r25	; 0x04
    2ede:	8b 83       	std	Y+3, r24	; 0x03
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <main+0x15c>
    2ee8:	9c 83       	std	Y+4, r25	; 0x04
    2eea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	8d 81       	ldd	r24, Y+5	; 0x05
    2eee:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	69 f7       	brne	.-38     	; 0x2ed8 <main+0x150>
    2efe:	14 c0       	rjmp	.+40     	; 0x2f28 <main+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	6f 81       	ldd	r22, Y+7	; 0x07
    2f02:	78 85       	ldd	r23, Y+8	; 0x08
    2f04:	89 85       	ldd	r24, Y+9	; 0x09
    2f06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0x198>
    2f24:	9a 83       	std	Y+2, r25	; 0x02
    2f26:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);
		LCD_voidWriteCmd(0,0x01);
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	61 e0       	ldi	r22, 0x01	; 1
    2f2c:	0e 94 0d 10 	call	0x201a	; 0x201a <LCD_voidWriteCmd>
    2f30:	3f cf       	rjmp	.-386    	; 0x2db0 <main+0x28>

00002f32 <__udivmodhi4>:
    2f32:	aa 1b       	sub	r26, r26
    2f34:	bb 1b       	sub	r27, r27
    2f36:	51 e1       	ldi	r21, 0x11	; 17
    2f38:	07 c0       	rjmp	.+14     	; 0x2f48 <__udivmodhi4_ep>

00002f3a <__udivmodhi4_loop>:
    2f3a:	aa 1f       	adc	r26, r26
    2f3c:	bb 1f       	adc	r27, r27
    2f3e:	a6 17       	cp	r26, r22
    2f40:	b7 07       	cpc	r27, r23
    2f42:	10 f0       	brcs	.+4      	; 0x2f48 <__udivmodhi4_ep>
    2f44:	a6 1b       	sub	r26, r22
    2f46:	b7 0b       	sbc	r27, r23

00002f48 <__udivmodhi4_ep>:
    2f48:	88 1f       	adc	r24, r24
    2f4a:	99 1f       	adc	r25, r25
    2f4c:	5a 95       	dec	r21
    2f4e:	a9 f7       	brne	.-22     	; 0x2f3a <__udivmodhi4_loop>
    2f50:	80 95       	com	r24
    2f52:	90 95       	com	r25
    2f54:	bc 01       	movw	r22, r24
    2f56:	cd 01       	movw	r24, r26
    2f58:	08 95       	ret

00002f5a <__prologue_saves__>:
    2f5a:	2f 92       	push	r2
    2f5c:	3f 92       	push	r3
    2f5e:	4f 92       	push	r4
    2f60:	5f 92       	push	r5
    2f62:	6f 92       	push	r6
    2f64:	7f 92       	push	r7
    2f66:	8f 92       	push	r8
    2f68:	9f 92       	push	r9
    2f6a:	af 92       	push	r10
    2f6c:	bf 92       	push	r11
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	ca 1b       	sub	r28, r26
    2f84:	db 0b       	sbc	r29, r27
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	09 94       	ijmp

00002f92 <__epilogue_restores__>:
    2f92:	2a 88       	ldd	r2, Y+18	; 0x12
    2f94:	39 88       	ldd	r3, Y+17	; 0x11
    2f96:	48 88       	ldd	r4, Y+16	; 0x10
    2f98:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fa0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fa2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fa4:	b9 84       	ldd	r11, Y+9	; 0x09
    2fa6:	c8 84       	ldd	r12, Y+8	; 0x08
    2fa8:	df 80       	ldd	r13, Y+7	; 0x07
    2faa:	ee 80       	ldd	r14, Y+6	; 0x06
    2fac:	fd 80       	ldd	r15, Y+5	; 0x05
    2fae:	0c 81       	ldd	r16, Y+4	; 0x04
    2fb0:	1b 81       	ldd	r17, Y+3	; 0x03
    2fb2:	aa 81       	ldd	r26, Y+2	; 0x02
    2fb4:	b9 81       	ldd	r27, Y+1	; 0x01
    2fb6:	ce 0f       	add	r28, r30
    2fb8:	d1 1d       	adc	r29, r1
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	ed 01       	movw	r28, r26
    2fc6:	08 95       	ret

00002fc8 <_exit>:
    2fc8:	f8 94       	cli

00002fca <__stop_program>:
    2fca:	ff cf       	rjmp	.-2      	; 0x2fca <__stop_program>
